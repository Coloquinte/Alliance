/*------------------------------------------------------------\
|                                                             |
| This file is part of the Alliance CAD System Copyright      |
| (C) Laboratoire LIP6 - Département ASIM Universite P&M Curie|
|                                                             |
| Home page      : http://www-asim.lip6.fr/alliance/          |
| E-mail support : mailto:alliance-support@asim.lip6.fr       |
|                                                             |
| This progam is  free software; you can redistribute it      |
| and/or modify it under the  terms of the GNU Library General|
| Public License as published by the Free Software Foundation |
| either version 2 of the License, or (at your option) any    |
| later version.                                              |
|                                                             |
| Alliance VLSI  CAD System  is distributed  in the hope that |
| it  will be useful, but WITHOUT  ANY WARRANTY;              |
| without even the  implied warranty of MERCHANTABILITY or    |
| FITNESS FOR A PARTICULAR PURPOSE. See the GNU General       |
| Public License for more details.                            |
|                                                             |
| You should have received a copy  of the GNU General Public  |
| License along with the GNU C Library; see the file COPYING. |
| If not, write to the Free Software Foundation, Inc.,        |
| 675 Mass Ave, Cambridge, MA 02139, USA.                     |
|                                                             |
\------------------------------------------------------------*/
/*WARNING: This file is automatically generated!*/
/* YACC parser for C syntax and for Objective C.  -*-c-*-
   Copyright(C) 1987, 88, 89, 92-97, 1998 Free Software Foundation, Inc.

This file is part of GNU CC.

GNU CC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or(at your option)
any later version.

GNU CC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU CC; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

/* This file defines the grammar of C and that of Objective C.
   ifobjc ... end ifobjc  conditionals contain code for Objective C only.
   ifc ... end ifc  conditionals contain code for C only.
   Sed commands in Makefile.in are used to convert this file into
   c-parse.y and into objc-parse.y.  */

/* To whomever it may concern: I have heard that such a thing was once
   written by AT&T, but I have never seen it.  */

%expect 46

/* These are the 23 conflicts you should get in parse.output;
   the state numbers may vary if minor changes in the grammar are made.

State 42 contains 1 shift/reduce conflict. (Two ways to parse ATTRIBUTE.)
State 44 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 103 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 110 contains 1 shift/reduce conflict. (Two ways to parse ATTRIBUTE.)
State 111 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 115 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 132 contains 1 shift/reduce conflict. (See comment at component_decl.)
State 180 contains 1 shift/reduce conflict. (Two ways to parse ATTRIBUTE.)
State 194 contains 2 shift/reduce conflict. (Four ways to parse this.)
State 202 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 214 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 220 contains 1 shift/reduce conflict. (Two ways to recover from error.)
State 304 contains 2 shift/reduce conflicts. (Four ways to parse this.)
State 335 contains 2 shift/reduce conflicts. (Four ways to parse this.)
State 347 contains 1 shift/reduce conflict. (Two ways to parse ATTRIBUTES.)
State 352 contains 1 shift/reduce conflict. (Two ways to parse ATTRIBUTES.)
State 383 contains 2 shift/reduce conflicts. (Four ways to parse this.)
State 434 contains 2 shift/reduce conflicts. (Four ways to parse this.)  */


%{

#include <stdio.h>
#include <errno.h>
#include <setjmp.h>

# include "mut.h"
# include "aut.h"
# include "gcp.h"

# include "c_flags.h"
# include "c_tree.h"
# include "c_treecompat.h"
# include "c_cdecl.h"
# include "c_clex.h"
# include "c_convert.h"
# include "c_ctypeck.h"
# include "c_expand.h"
# include "c_stmt.h"
# include "c_common.h"
# include "c_debug.h"

#ifdef MULTIBYTE_CHARS
#include <stdlib.h>
#include <locale.h>
#endif


#ifndef errno
extern int errno;
#endif

void yyerror();

/* Like YYERROR but do call yyerror.  */
#define YYERROR1 { yyerror("syntax error"); YYERROR; }

/* Cause the `yydebug' variable to be defined.  */
#define YYDEBUG 1
%}

%start program

/* %union {long itype; tree ttype; enum tree_code code;
  char *filename; int lineno; int ends_in_label; } */

%union {long            itype; 
        c_tree_node    *ttype;
        int             code;
        char           *filename;
        int             lineno;
        c_stmt_or_label stmt_or_label; }

/* All identifiers that are not reserved words
   and are not declared typedefs in the current block */
%token tok_IDENTIFIER

/* All identifiers that are declared typedefs in the current block.
   In some contexts, they are treated just like IDENTIFIER,
   but they can also serve as typespecs in declarations.  */
%token tok_TYPENAME

/* Reserved words that specify storage class.
   yylval contains an IDENTIFIER_NODE which indicates which one.  */
%token tok_SCSPEC

/* Reserved words that specify type.
   yylval contains an IDENTIFIER_NODE which indicates which one.  */
%token tok_TYPESPEC

/* Reserved words that qualify type: "const" or "volatile".
   yylval contains an IDENTIFIER_NODE which indicates which one.  */
%token tok_TYPE_QUAL

/* Character or numeric constants.
   yylval is the node for the constant.  */
%token tok_CONSTANT

/* String constants in raw form.
   yylval is a STRING_CST node.  */
%token tok_STRING

/* "...", used for functions with variable arglists.  */
%token tok_ELLIPSIS

/* the reserved words */
/* SCO include files test "ASM", so use something else. */
%token tok_SIZEOF tok_ENUM tok_STRUCT tok_UNION tok_IF tok_ELSE tok_WHILE tok_DO tok_FOR
%token tok_SWITCH tok_CASE tok_DEFAULT
%token tok_BREAK tok_CONTINUE tok_RETURN tok_GOTO tok_ASM_KEYWORD tok_TYPEOF tok_ALIGNOF
%token tok_ATTRIBUTE tok_EXTENSION tok_LABEL
%token tok_REALPART tok_IMAGPART

/* Add precedence rules to solve dangling else s/r conflict */
%nonassoc tok_IF
%nonassoc tok_ELSE

/* Define the operator tokens and their precedences.
   The value is an integer because, if used, it is the tree code
   to use in the expression made from the operator.  */

%right <code> tok_ASSIGN '='
%right <code> '?' ':'
%left <code> tok_OROR
%left <code> tok_ANDAND
%left <code> '|'
%left <code> '^'
%left <code> '&'
%left <code> tok_EQCOMPARE
%left <code> tok_ARITHCOMPARE
%left <code> tok_LSHIFT tok_RSHIFT
%left <code> '+' '-'
%left <code> '*' '/' '%'
%right <code> tok_UNARY tok_PLUSPLUS tok_MINUSMINUS
%left tok_HYPERUNARY
%left <code> tok_POINTSAT '.' '(' '['

/* The Objective-C keywords.  These are included in C and in
   Objective C, so that the token codes are the same in both.  */
%token tok_INTERFACE tok_IMPLEMENTATION tok_END tok_SELECTOR tok_DEFS tok_ENCODE
%token tok_CLASSNAME tok_PUBLIC tok_PRIVATE tok_PROTECTED
%token tok_PROTOCOL tok_OBJECTNAME tok_CLASS tok_ALIAS

/* Objective-C string constants in raw form.
   yylval is an OBJC_STRING_CST node.  */
%token tok_OBJC_STRING


%type <code> unop

%type <ttype> identifier tok_IDENTIFIER tok_TYPENAME tok_CONSTANT 
%type <ttype> expr nonnull_exprlist exprlist
%type <ttype> expr_no_commas cast_expr unary_expr primary string tok_STRING
%type <ttype> typed_declspecs reserved_declspecs
%type <ttype> typed_typespecs reserved_typespecquals
%type <ttype> declmods typespec typespecqual_reserved
%type <ttype> typed_declspecs_no_prefix_attr reserved_declspecs_no_prefix_attr
%type <ttype> declmods_no_prefix_attr
%type <ttype> tok_SCSPEC tok_TYPESPEC tok_TYPE_QUAL nonempty_type_quals maybe_type_qual
%type <ttype> initdecls notype_initdecls initdcl notype_initdcl
%type <ttype> init maybeasm
%type <ttype> asm_operands nonnull_asm_operands asm_operand asm_clobbers
%type <ttype> maybe_attribute attributes attribute attribute_list attrib
%type <ttype> any_word

%type <ttype> fndef datadef extdefs extdef

%type <ttype> compstmt

%type <ttype> declarator
%type <ttype> notype_declarator after_type_declarator
%type <ttype> parm_declarator

%type <ttype> structsp component_decl_list component_decl_list2
%type <ttype> component_decl components component_declarator
%type <ttype> enumlist enumerator
%type <ttype> typename absdcl absdcl1 type_quals
%type <ttype> xexpr parms parm identifiers

%type <ttype> parmlist parmlist_1 parmlist_2
%type <ttype> parmlist_or_identifiers parmlist_or_identifiers_1
%type <ttype> identifiers_or_typenames

%type <itype> setspecs
%type <itype> setspecs_ludo

%type <ttype> lineno_labeled_stmt

%type <stmt_or_label> lineno_stmt_or_label lineno_stmt_or_labels stmt_or_label stmts xstmts
%type <ttype> stmt all_iter_stmt all_iter_stmt_simple compstmt_or_error
%type <ttype> do_stmt_start
%type <ttype> label

%type <ttype> simple_if if_prefix

%type <filename> save_filename
%type <lineno> save_lineno



%{
/* Number of statements(loosely speaking) and compound statements 
   seen so far.  */
static int stmt_count;
static int compstmt_count;
  
/* Input file and line number of the end of the body of last simple_if;
   used by the stmt-rule immediately after simple_if returns.  */
static char *if_stmt_file;
static int if_stmt_line;

/* List of types and structure classes of the current declaration.  */
static c_tree_node *current_declspecs =(c_tree_node *)0;
static c_tree_node *prefix_attributes =(c_tree_node *)0;

/* Stack of saved values of current_declspecs and prefix_attributes.  */
static c_tree_node *declspec_stack;

/* 1 if we explained undeclared var errors.  */
static int undeclared_variable_notice;

/* Tell yyparse how to print a token's value, if yydebug is set.  */

#define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)
extern void yyprint();
%}

%%
program: /* empty */
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids an empty source file");
      }

      c_finish_file( (c_tree_node *)0 );
    }
  | extdefs
    {
      /* In case there were missing closebraces,
         get us back to the global binding level.  */

      while(! c_global_bindings_p())
      {
        c_pop_level(0, 0, 0);
      }

      c_finish_file( c_tree_reverse_list( $1 ) );
      /* LUDO
      c_view_bindings();
      */
    }
  ;

/* the reason for the strange actions in this rule
 is so that notype_initdecls when reached via datadef
 can find a valid list of type and sc specs in $0. */

extdefs:
    extdef
    {
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
  | extdefs 
    extdef
    {
      $$ = c_tree_add_head_list( (c_tree_node *)0, $2, $1 );
    }
  ;

extdef:
    fndef
    {
      $$ = $1;
    }
  | datadef
    {
      $$ = $1;
    }
  | tok_ASM_KEYWORD '(' expr ')' ';'
    { 
      CStripNops($3);

      if ( ((CTreeNodeFirstCode($3) == C_EXPR_NODE) &&
            (CTreeExprCode($3) == C_ADDR_EXPR) &&
            (CTreeNodeFirstCode(CTreeExprOperand($3,0))== C_STRING_NODE)) ||
           (CTreeNodeFirstCode($3) == C_STRING_NODE ))
      {
# ifdef LUDO_DONE
        assemble_asm($3);
# endif
      }
      else
      {
        error("argument of `asm' is not a constant string");
      }

      $$ = (c_tree_node *)0;
    }
  | extension extdef
    {
      c_pedantic = $<itype>1;
      $$ = $2;
    }
  ;

datadef:
    setspecs_ludo notype_initdecls ';'
    {
      if ( c_pedantic)
      {
        error("ANSI C forbids data definition with no type or storage class");
      }
      else if (!c_flag_traditional)
      {
        warning("data definition has no type or storage class"); 
      }

      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($1); 

      $$ = $2;
    }
    | declmods setspecs notype_initdecls ';'
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 

      $$ = $3;
    }
  | typed_declspecs setspecs initdecls ';'
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2);  

      $$ = $3;
    }
  | declmods ';'
    {
      pedwarn("empty declaration"); 

      $$ = (c_tree_node *)0;
    }
  | typed_declspecs ';'
    {
      c_shadow_tag($1); 

      $$ = $1;
    }
  | error ';'
    {
      $$ = (c_tree_node *)0;
    }
  | error '}'
    {
      $$ = (c_tree_node *)0;
    }
  | ';'
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C does not allow extra `;' outside of a function"); 
      }

      $$ = (c_tree_node *)0;
    }
  ;

fndef:
    typed_declspecs setspecs declarator
    {
      if (! c_start_function(current_declspecs, $3,
                  prefix_attributes,(c_tree_node *)0, 0))
      {
        YYERROR1;
      }
      c_reinit_parse_for_function(); 
    }
    old_style_parm_decls
    {
      c_store_parm_decls(); 
    }
    compstmt_or_error
    {
      $$ = c_finish_function(0,$7);
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | typed_declspecs setspecs declarator error
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 

      $$ = $3;
    }
  | declmods setspecs notype_declarator
    {
      if (! c_start_function(current_declspecs, $3,
                 prefix_attributes,(c_tree_node *)0, 0))
      {
        YYERROR1;
      }
      c_reinit_parse_for_function(); 
    }
    old_style_parm_decls
    {
      c_store_parm_decls(); 
    }
    compstmt_or_error
    {
      $$ = c_finish_function(0,$7);
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | declmods setspecs notype_declarator error
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 

      $$ = $3;
    }
  | setspecs_ludo notype_declarator
    {
      if (! c_start_function((c_tree_node *)0, $2,
               prefix_attributes,(c_tree_node *)0, 0))
      {
        YYERROR1;
      }
      c_reinit_parse_for_function(); 
    }
    old_style_parm_decls
    {
      c_store_parm_decls(); 
    }
    compstmt_or_error
    {
      $$ = c_finish_function(0,$6);
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($1); 
    }
  | setspecs_ludo notype_declarator error
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($1); 

      $$ = $2;
    }
  ;

identifier:
  tok_IDENTIFIER
  | tok_TYPENAME
  ;

unop:     '&'
    {
      $$ = C_ADDR_EXPR;
    }
  | '-'
    {
      $$ = C_NEGATE_EXPR; 
    }
  | '+'
    {
      $$ = C_CONVERT_EXPR; 
    }
  | tok_PLUSPLUS
    {
      $$ = C_PREINCREMENT_EXPR; 
    }
  | tok_MINUSMINUS
    {
      $$ = C_PREDECREMENT_EXPR; 
    }
  | '~'
    {
      $$ = C_BIT_NOT_EXPR; 
    }
  | '!'
    {
      $$ = C_TRUTH_NOT_EXPR; 
    }
  ;

expr:  nonnull_exprlist
    {
      $$ = c_parser_build_compound_expr($1); 
    }
  ;

exprlist:
    /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | nonnull_exprlist
  ;

nonnull_exprlist:
  expr_no_commas
    {
      $$ = c_tree_build_list((c_tree_node *)0, $1); 
    }
  | nonnull_exprlist ',' expr_no_commas
    {
      c_tree_concat_list($1, c_tree_build_list((c_tree_node *)0, $3)); 
    }
  ;

unary_expr:
  primary
  | '*' cast_expr   %prec tok_UNARY
    {
      $$ = c_parser_build_indirect_ref( $2, "unary *"); 
    }
  /* __extension__ turns off -c_pedantic for following primary.  */
  | extension cast_expr    %prec tok_UNARY
    {
      $$ = $2;
      c_pedantic = $<itype>1; 
    }
  | unop cast_expr  %prec tok_UNARY
    {
      $$ = c_parser_build_unary_op($1, $2, 0);
# ifdef LUDO_NO_SKIP
      overflow_warning($$); 
# endif
    }
  /* Refer to the address of a label as a pointer.  */
  | tok_ANDAND identifier
    {
      c_tree_node *label = c_lookup_label($2);
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids `&&'");
      }
      if (label == 0)
      {
        $$ = c_null_pointer_node;
      }
      else
      {
        CSetTreeNodeUsed(label);
        $$ = c_tree_build_unary_expr( C_ADDR_EXPR, label);
        CTreeType( $$ )  = c_ptr_type_node;
        CSetTreeNodeConstant($$);
      }
    }
  | sizeof unary_expr  %prec tok_UNARY
    {
      c_skip_evaluation--;
      if ( CTreeExprCode($2) == C_COMPONENT_REF
          &&  CTreeExprCode( CTreeExprOperand($2, 1)))
      {
        error("`sizeof' applied to a bit-field");
      }
      $$ = c_get_c_sizeof(CTreeType($2)); 
    }
  | sizeof '(' typename ')'  %prec tok_HYPERUNARY
    {
      c_skip_evaluation--;
      $$ = c_get_c_sizeof(c_groktypename($3)); 
    }
  | alignof unary_expr  %prec tok_UNARY
    {
      c_skip_evaluation--;
      $$ = c_get_c_alignof_expr($2); 
    }
  | alignof '(' typename ')'  %prec tok_HYPERUNARY
    {
      c_skip_evaluation--;
      $$ = c_get_c_alignof(c_groktypename($3)); 
    }
  | tok_REALPART cast_expr %prec tok_UNARY
    {
      $$ = c_parser_build_unary_op(C_REALPART_EXPR, $2, 0); 
    }
  | tok_IMAGPART cast_expr %prec tok_UNARY
    {
      $$ = c_parser_build_unary_op(C_IMAGPART_EXPR, $2, 0); 
    }
  ;

sizeof:
  tok_SIZEOF
    {
      c_skip_evaluation++; 
    }
  ;

alignof:
  tok_ALIGNOF 
    {
      c_skip_evaluation++;
    }
  ;

cast_expr:
  unary_expr
  | '(' typename ')' cast_expr  %prec tok_UNARY
    {
      c_tree_node *type = c_groktypename($2);
      $$ = c_build_c_cast(type, $4); 
    }
  | '(' typename ')' '{' 
    {
      c_start_init((c_tree_node *)0, NULL, 0);
      $2 = c_groktypename($2);
      c_really_start_incremental_init($2); 
    }
    initlist_maybe_comma '}'  %prec tok_UNARY
    {
      c_tree_node *tmp_node;

      $$ = c_pop_init_level(0);
      tmp_node = c_finish_init();

      if (c_pedantic)
      {
        pedwarn("ANSI C forbids constructor expressions");
      }

      if ( CTreeTypeCode($2) == C_ARRAY_TYPE && CTreeTypeSize($2) == 0)
      {
        int failure = c_complete_array_type( $2, $$, 1);
        if (failure) abort();
      }

      if ( CTreeDeclInitial( $$ ) == c_error_mark_node )
        CTreeDeclInitial( $$ ) = tmp_node;
    }
  ;

expr_no_commas:
    cast_expr
  | expr_no_commas '+' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '-' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '*' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '/' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '%' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas tok_LSHIFT expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas tok_RSHIFT expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas tok_ARITHCOMPARE expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas tok_EQCOMPARE expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '&' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '|' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas '^' expr_no_commas
    {
      $$ = c_parser_build_binary_op($2, $1, $3); 
    }
  | expr_no_commas tok_ANDAND
    {
      $1 = c_truthvalue_conversion( c_default_conversion($1));
      c_skip_evaluation += $1 == c_boolean_false_node; 
    }
    expr_no_commas
    {
      c_skip_evaluation -= $1 == c_boolean_false_node;
      $$ = c_parser_build_binary_op(C_TRUTH_ANDIF_EXPR, $1, $4); 
    }
  | expr_no_commas tok_OROR
    {
      $1 = c_truthvalue_conversion(c_default_conversion($1));
      c_skip_evaluation += $1 == c_boolean_true_node; 
    }
    expr_no_commas
    {
      c_skip_evaluation -= $1 == c_boolean_true_node;
      $$ = c_parser_build_binary_op(C_TRUTH_ORIF_EXPR, $1, $4); 
    }
  | expr_no_commas '?'
    {
      $1 = c_truthvalue_conversion(c_default_conversion($1));
      c_skip_evaluation += $1 == c_boolean_false_node; 
    }
    expr ':'
    {
      c_skip_evaluation +=(($1 == c_boolean_true_node)
              -($1 == c_boolean_false_node)); 
    }
    expr_no_commas
    {
      c_skip_evaluation -= $1 == c_boolean_true_node;
      $$ = c_parser_build_conditional_expr($1, $4, $7); 
    }
  | expr_no_commas '?'
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids omitting the middle term of a ?: expression");
      }
      $<ttype>2 = $1;
      $1 = c_truthvalue_conversion(c_default_conversion($<ttype>2));
      c_skip_evaluation += $1 == c_boolean_true_node; 
    }
    ':' expr_no_commas
    {
      c_skip_evaluation -= $1 == c_boolean_true_node;
      $$ = c_parser_build_conditional_expr($1, $<ttype>2, $5); 
    }
  | expr_no_commas '=' expr_no_commas
    {
      $$ = c_parser_build_modify_expr($1, C_NOP_EXPR, $3);
      CTreeExprComplexity($$) = C_MODIFY_EXPR; 
    }
  | expr_no_commas tok_ASSIGN expr_no_commas
    {
      $$ = c_parser_build_modify_expr($1, $2, $3);
      /* This inhibits warnings in truthvalue_conversion.  */
      CTreeExprComplexity($$) = C_UNKNOWN_EXPR; 
    }
  ;

primary:
  tok_IDENTIFIER
    {
      $$ = c_lastiddecl;

      if (!$$ || $$ == c_error_mark_node)
      {
        if (yychar == YYEMPTY) yychar = YYLEX;

        if (yychar == '(')
        {
          /* Ordinary implicit function declaration.  */
          $$ = c_implicitly_declare($1);
# ifdef LUDO_DONE
          assemble_external($$);
# endif
          CSetTreeNodeUsed($$);
        }
        else if (c_current_function_decl == 0)
        {
          error("`%s' undeclared here(not in a function)", CTreeIdentPointer($1));
          $$ = c_error_mark_node;
        }
        else
        {
          if ( CTreeIdentGlobalValue($1) != c_error_mark_node ||
               CTreeIdentErrorLocus($1) != c_current_function_decl)
          {
            error("`%s' undeclared(first use in this function)",
                  CTreeIdentPointer($1));

            if (! undeclared_variable_notice)
            {
              error("(Each undeclared identifier is reported only once");
              error("for each function it appears in.)");
              undeclared_variable_notice = 1;
            }
          }
          $$ = c_error_mark_node;
            /* Prevent repeated error messages.  */

          CTreeIdentGlobalValue( $1) = c_error_mark_node;
          CTreeIdentErrorLocus( $1 ) = c_current_function_decl;
        }
      }
      else if (CTreeType($$) == c_error_mark_node)
      {
        $$ = c_error_mark_node;
      }
      else if (CIsTreeDeclAnticipated($$))
      {
          /* The first time we see a build-in function used,
              if it has not been declared.  */
          CClearTreeDeclAnticipated($$);
          if (yychar == YYEMPTY) yychar = YYLEX;
          if (yychar == '(')
          {
            /* Omit the implicit declaration we
               would ordinarily do, so we don't lose
               the actual built in type.
               But print a diagnostic for the mismatch.  */
              if ( CTreeDeclCode($$) != C_FUNCTION_DECL)
              {
                error("`%s' implicitly declared as function",
                 CTreeIdentPointer(CTreeDeclName($$)));
              }
            else if (( CTreeTypeMode(CTreeType(CTreeType($$)))
                != CTreeTypeMode(c_integer_type_node))
               &&(CTreeType(CTreeType($$))
                   != c_void_type_node))
            {
              pedwarn("type mismatch in implicit declaration for built-in function `%s'",
                 CTreeIdentPointer(CTreeDeclName($$)));
            }
            /* If it really returns void, change that to int.  */
            if (CTreeType(CTreeType($$)) == c_void_type_node)
            {
              CTreeType($$)
                = c_tree_build_function_type(c_integer_type_node,
                     CTreeTypeValues(CTreeType($$)));
            }
         }
         else
         {
           pedwarn("built-in function `%s' used without declaration",
           CTreeIdentPointer(CTreeDeclName($$)));
         }

          /* Do what we would ordinarily do when a fn is used.  */
# ifdef LUDO_DONE
          assemble_external($$);
# endif
          CSetTreeNodeUsed($$);
      }
      else
      {
# ifdef LUDO_DONE
        assemble_external($$);
# endif
        CSetTreeNodeUsed($$);
      }

      if ( ( CTreeNodeFirstCode($$) == C_DECL_NODE  ) &&
           ( CTreeDeclCode($$) == C_CONST_DECL ) )
      {
        c_tree_node *type;

        $$ = CTreeDeclInitial( $$ );
          /* This is to prevent an enum whose value is 0
             from being considered a null pointer constant.  */
        type = CTreeType( $$ );
        $$ = c_tree_build_unary_expr( C_NOP_EXPR, $$);
        CTreeType( $$ ) = type;
        CSetTreeNodeConstant($$);
      }
    }
  | tok_CONSTANT
  | string
    {
      $$ = c_tree_combine_strings($1); 
    }
  | '(' expr ')'
    {
# ifdef LUDO_NO_SKIP
    char class = TREE_CODE_CLASS(TREE_CODE($2));
      if (class == 'e' || class == '1'
          || class == '2' || class == '<')
        C_SET_EXP_ORIGINAL_CODE($2, ERROR_MARK);
# endif
      $$ = $2; 
    }
  | '(' error ')'
    {
      $$ = c_error_mark_node; 
    }
  | '('
    {
      if (c_current_function_decl == 0)
      {
        error("braced-group within expression allowed only inside a function");
        YYERROR;
      }
# ifdef LUDO_NO_SKIP
      /* We must force a BLOCK for this level
         so that, if it is not expanded later,
         there is a way to turn off the entire subtree of blocks
         that are contained in it.  */
      keep_next_level();
      push_iterator_stack();
      push_label_level();
      $<ttype>$ = expand_start_stmt_expr(); 
# endif
    }
    compstmt ')'
    {
# ifdef LUDO_NO_SKIP
      tree rtl_exp;
# endif
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids braced-groups within expressions");
      }
# ifdef LUDO_NO_SKIP
      pop_iterator_stack();
      pop_label_level();
      rtl_exp = expand_end_stmt_expr($<ttype>2);
      /* The statements have side effects, so the group does.  */
      TREE_SIDE_EFFECTS(rtl_exp) = 1;

      if (TREE_CODE($3) == BLOCK)
        {
          /* Make a BIND_EXPR for the BLOCK already made.  */
          $$ = build(C_BIND_EXPR, CTreeType(rtl_exp),
         (c_tree_node *)0, rtl_exp, $3);
          /* Remove the block from the tree at this point.
       It gets put back at the proper place
       when the BIND_EXPR is expanded.  */
          delete_block($3);
        }
      else
# endif
        $$ = $3;
    }
  | primary '(' exprlist ')'   %prec '.'
    {
      $$ = c_parser_build_function_call($1, $3); 
    }
  | primary '[' expr ']'   %prec '.'
    {
      $$ = c_parser_build_array_ref($1, $3); 
    }
  | primary '.' identifier
    {
      $$ = c_parser_build_component_ref($1, $3);
    }
  | primary tok_POINTSAT identifier
    {
      c_tree_node *expr = c_parser_build_indirect_ref($1, "->");
      $$ = c_parser_build_component_ref(expr, $3);
    }
  | primary tok_PLUSPLUS
    {
      $$ = c_parser_build_unary_op(C_POSTINCREMENT_EXPR, $1, 0); 
    }
  | primary tok_MINUSMINUS
    {
      $$ = c_parser_build_unary_op(C_POSTDECREMENT_EXPR, $1, 0); 
    }
  ;

/* Produces a STRING_CST with perhaps more STRING_CSTs chained onto it.  */
string:
    tok_STRING
  | string tok_STRING
    {
      $$ = c_tree_concat_list($1, $2); 
    }
  ;


old_style_parm_decls:
  /* empty */
  | datadecls
  | datadecls tok_ELLIPSIS
    /* ... is used here to indicate a varargs function.  */
    {
      c_c_mark_varargs();
      if (c_pedantic)
      {
        pedwarn("ANSI C does not permit use of `varargs.h'"); 
      }
    }
  ;

/* The following are analogous to lineno_decl, decls and decl
   except that they do not allow nested functions.
   They are used for old-style parm decls.  */
lineno_datadecl:
    save_filename save_lineno datadecl
    {
    }
  ;

datadecls:
  lineno_datadecl
  | errstmt
  | datadecls lineno_datadecl
  | lineno_datadecl errstmt
  ;

/* We don't allow prefix attributes here because they cause reduce/reduce
   conflicts: we can't know whether we're parsing a function decl with
   attribute suffix, or function defn with attribute prefix on first old
   style parm.  */
datadecl:
  typed_declspecs_no_prefix_attr setspecs initdecls ';'
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | declmods_no_prefix_attr setspecs notype_initdecls ';'
    {
      current_declspecs = CTreeListValue(declspec_stack);  
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | typed_declspecs_no_prefix_attr ';'
    {
      c_shadow_tag_warned($1, 1);
      pedwarn("empty declaration"); 
    }
  | declmods_no_prefix_attr ';'
    {
      pedwarn("empty declaration"); 
    }
  ;

/* This combination which saves a lineno before a decl
   is the normal thing to use, rather than decl itself.
   This is to avoid shift/reduce conflicts in contexts
   where statement labels are allowed.  */
lineno_decl:
    save_filename save_lineno decl
    {
    }
  ;

decls:
  lineno_decl
  | errstmt
  | decls lineno_decl
  | lineno_decl errstmt
  ;

/* records the type and storage class specs to use for processing
   the declarators that follow.
   Maintains a stack of outer-level values of current_declspecs,
   for the sake of parm declarations nested in function declarators.  */
setspecs: /* empty */
    {
# ifdef LUDO_NO_SKIP
      $$ = suspend_momentary();
      pending_xref_error();
# endif
      declspec_stack = c_tree_add_head_list(prefix_attributes,
                                              current_declspecs, declspec_stack);
      c_split_specs_attrs($<ttype>0, &current_declspecs, &prefix_attributes); 
    }
  ;

setspecs_ludo: /* empty */
    {
# ifdef LUDO_NO_SKIP
      $$ = suspend_momentary();
      pending_xref_error();
# endif
      declspec_stack = c_tree_add_head_list(prefix_attributes,
                                              current_declspecs, declspec_stack);
      c_split_specs_attrs(NULL, &current_declspecs, &prefix_attributes); 
    }
  ;

/* ??? Yuck.  See after_type_declarator.  */
setattrs: /* empty */
    {
      prefix_attributes = c_tree_concat_list(prefix_attributes, $<ttype>0); 
    }
  ;

decl:
    typed_declspecs setspecs initdecls ';'
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | declmods setspecs notype_initdecls ';'
    {
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | typed_declspecs ';'
    {
      c_shadow_tag($1); 
    }
  | declmods ';'
    {
      pedwarn("empty declaration"); 
    }
  | extension decl
    {
      c_pedantic = $<itype>1; 
    }
  ;

/* Declspecs which contain at least one type specifier or typedef name.
  (Just `const' or `volatile' is not enough.)
   A typedef'd name following these is taken as a name to be declared.
   Declspecs have a non-NULL CTreeListValue, attributes do not.  */

typed_declspecs:
    typespec reserved_declspecs
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $1, $2); 
    }
  | declmods typespec reserved_declspecs
    {
      $$ = c_tree_concat_list( $3, c_tree_add_head_list((c_tree_node *)0, $2, $1)); 
    }
  ;

reserved_declspecs:  /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | reserved_declspecs typespecqual_reserved
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  | reserved_declspecs tok_SCSPEC
    {
      if (c_extra_warnings)
      {
        warning("`%s' is not at beginning of declaration", CTreeIdentPointer($2));
      }
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  | reserved_declspecs attributes
    {
      $$ = c_tree_add_head_list($2,(c_tree_node *)0, $1); 
    }
  ;

typed_declspecs_no_prefix_attr:
    typespec reserved_declspecs_no_prefix_attr
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $1, $2); 
    }
  | declmods_no_prefix_attr typespec reserved_declspecs_no_prefix_attr
    {
      $$ = c_tree_concat_list($3, c_tree_add_head_list((c_tree_node *)0, $2, $1)); 
    }
  ;

reserved_declspecs_no_prefix_attr:
    /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | reserved_declspecs_no_prefix_attr typespecqual_reserved
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  | reserved_declspecs_no_prefix_attr tok_SCSPEC
    {
      if (c_extra_warnings)
      {
        warning("`%s' is not at beginning of declaration", CTreeIdentPointer($2));
      }
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  ;

/* List of just storage classes, type modifiers, and prefix attributes.
   A declaration can start with just this, but then it cannot be used
   to redeclare a typedef-name.
   Declspecs have a non-NULL CTreeListValue, attributes do not.  */

declmods:
    declmods_no_prefix_attr
    {
      $$ = $1; 
    }
  | attributes
    {
      $$ = c_tree_add_head_list($1,(c_tree_node *)0,(c_tree_node *)0); 
    }
  | declmods declmods_no_prefix_attr
    {
      $$ = c_tree_concat_list($2, $1); 
    }
  | declmods attributes
    {
      $$ = c_tree_add_head_list($2,(c_tree_node *)0, $1); 
    }
  ;

declmods_no_prefix_attr:
    tok_TYPE_QUAL
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $1,(c_tree_node *)0);
      CSetTreeNodeStatic($$); 
    }
  | tok_SCSPEC
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $1,(c_tree_node *)0); 
    }
  | declmods_no_prefix_attr tok_TYPE_QUAL
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1);
      CSetTreeNodeStatic($$); 
    }
  | declmods_no_prefix_attr tok_SCSPEC
    {
      if ( ( c_extra_warnings      ) &&
           ( CIsTreeNodeStatic($1) ) )
      {
        warning("`%s' is not at beginning of declaration", CTreeIdentPointer($2));
      }

      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1);
      if ( CIsTreeNodeStatic( $1 ) )
      {
        CSetTreeNodeStatic( $$ );
      }
    }
  ;


/* Used instead of declspecs where storage classes are not allowed
  (that is, for typenames and structure components).
   Don't accept a typedef-name if anything but a modifier precedes it.  */

typed_typespecs:
    typespec reserved_typespecquals
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $1, $2); 
    }
  | nonempty_type_quals typespec reserved_typespecquals
    {
      $$ = c_tree_concat_list($3, c_tree_add_head_list((c_tree_node *)0, $2, $1)); 
    }
  ;

reserved_typespecquals:  /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | reserved_typespecquals typespecqual_reserved
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  ;

/* A typespec(but not a type qualifier).
   Once we have seen one of these in a declaration,
   if a typedef name appears then it is being redeclared.  */

typespec: tok_TYPESPEC
  | structsp
  | tok_TYPENAME
    {
    /* For a typedef name, record the meaning, not the name.
         In case of `foo foo, bar;'.  */
      $$ = c_lookup_name($1); 
    }
  | tok_TYPEOF '(' expr ')'
    {
      $$ = CTreeType($3); 
    }
  | tok_TYPEOF '(' typename ')'
    {
      $$ = c_groktypename($3); 
    }
  ;

/* A typespec that is a reserved word, or a type qualifier.  */

typespecqual_reserved: tok_TYPESPEC
  | tok_TYPE_QUAL
  | structsp
  ;

initdecls:
    initdcl
    {
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
  | initdecls ',' initdcl
    {
      $$ = c_tree_add_head_list( (c_tree_node *)0, $3, $1 );
    }
  ;

notype_initdecls:
    notype_initdcl
  | notype_initdecls ',' initdcl
  ;

maybeasm:
    /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | tok_ASM_KEYWORD '(' string ')'
    {
      if (CTreeChain($3))
      { 
        $3 = c_tree_combine_strings($3);
      }
      $$ = $3;
    }
  ;

initdcl:
    declarator maybeasm maybe_attribute '='
    {
      $<ttype>$ = c_start_decl($1, current_declspecs, 1, $3, prefix_attributes);
      c_start_init( $<ttype>$, $2, c_global_bindings_p()); 
    }
    init
/* Note how the declaration of the variable is in effect while its init is parsed! */
    {
      c_tree_node *tmp_node;
      tmp_node = c_finish_init();
      c_finish_decl($<ttype>5, $6, $2); 
      $$ = $<ttype>5;

      if ( CTreeDeclInitial( $$ ) == c_error_mark_node )
        CTreeDeclInitial( $$ ) = tmp_node;
    }
  | declarator maybeasm maybe_attribute
    {
      c_tree_node *d = c_start_decl($1, current_declspecs, 0, $3, prefix_attributes);
      c_finish_decl(d,(c_tree_node *)0, $2); 
      $$ = d;
    }
  ;

notype_initdcl:
    notype_declarator maybeasm maybe_attribute '='
    {
      $<ttype>$ = c_start_decl($1, current_declspecs, 1, $3, prefix_attributes);
      c_start_init($<ttype>$, $2, c_global_bindings_p()); 
    }
    init
/* Note how the declaration of the variable is in effect while its init is parsed! */
    {
      c_tree_node *tmp_node;
      tmp_node = c_finish_init();

      c_decl_attributes($<ttype>5, $3, prefix_attributes);
      c_finish_decl($<ttype>5, $6, $2); 

      if ( CTreeDeclInitial( $<ttype>5 ) == c_error_mark_node )
        CTreeDeclInitial( $<ttype>5 ) = tmp_node;
    }
  | notype_declarator maybeasm maybe_attribute
    {
      c_tree_node *d;
      d = c_start_decl($1, current_declspecs, 0, $3, prefix_attributes);
      c_finish_decl(d,(c_tree_node *)0, $2); 
    }
  ;
/* the * rules are dummies to accept the Apollo extended syntax
   so that the header files compile. */
maybe_attribute:
      /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | attributes
    {
      $$ = $1; 
    }
  ;
 
attributes:
      attribute
    {
      $$ = $1; 
    }
  | attributes attribute
    {
      $$ = c_tree_concat_list($1, $2); 
    }
  ;

attribute:
      tok_ATTRIBUTE '(' '(' attribute_list ')' ')'
    {
      $$ = $4; 
    }
  ;

attribute_list:
      attrib
    {
      $$ = $1; 
    }
  | attribute_list ',' attrib
    {
      $$ = c_tree_concat_list($1, $3); 
    }
  ;
 
attrib:
    /* empty */
    {
      $$ = (c_tree_node *)0; 
    }
  | any_word
    {
      $$ = c_tree_build_list($1,(c_tree_node *)0); 
    }
  | any_word '(' tok_IDENTIFIER ')'
    {
      $$ = c_tree_build_list($1, c_tree_build_list((c_tree_node *)0, $3)); 
    }
  | any_word '(' tok_IDENTIFIER ',' nonnull_exprlist ')'
    {
      $$ = c_tree_build_list($1, c_tree_add_head_list((c_tree_node *)0, $3, $5)); 
    }
  | any_word '(' exprlist ')'
    {
      $$ = c_tree_build_list($1, $3); 
    }
  ;

/* This still leaves out most reserved keywords,
   shouldn't we include them?  */

any_word:
    identifier
  | tok_SCSPEC
  | tok_TYPESPEC
  | tok_TYPE_QUAL
  ;

/* Initializers.  `init' is the entry point.  */

init:
  expr_no_commas
  | '{'
    {
      c_really_start_incremental_init((c_tree_node *)0);
      /* Note that the call to clear_momentary
         is in process_init_element.  */
# ifdef LUDO_NO_SKIP
      push_momentary(); 
# endif
    }
    initlist_maybe_comma '}'
    {
      $$ = c_pop_init_level(0);
# ifdef LUDO_NO_SKIP
      if ($$ == c_error_mark_node
          && !(yychar == tok_STRING || yychar == tok_CONSTANT))
        pop_momentary();
      else
        pop_momentary_nofree(); 
# endif
    }

  | error
    {
      $$ = c_error_mark_node; 
    }
  ;

/* `initlist_maybe_comma' is the guts of an initializer in braces.  */
initlist_maybe_comma:
    /* empty */
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids empty initializer braces"); 
      }
    }
  | initlist1 maybecomma
  ;

initlist1:
    initelt
  | initlist1 ',' initelt
  ;

/* `initelt' is a single element of an initializer.
   It may use braces.  */
initelt:
  expr_no_commas
    {
      c_process_init_element($1); 
    }
  | '{' 
    {
      c_push_init_level(0); 
    }
    initlist_maybe_comma '}'
    {
      c_process_init_element(c_pop_init_level(0)); 
    }
  | error
  /* These are for labeled elements.  The syntax for an array element
     initializer conflicts with the syntax for an Objective-C message,
     so don't include these productions in the Objective-C grammar.  */
  | '[' expr_no_commas tok_ELLIPSIS expr_no_commas ']' '='
    {
      c_set_init_index($2, $4); 
    }
    initelt
  | '[' expr_no_commas ']' '='
    {
      c_set_init_index($2,(c_tree_node *)0); 
    }
    initelt
  | '[' expr_no_commas ']'
    {
      c_set_init_index($2,(c_tree_node *)0); 
    }
    initelt
  | identifier ':'
    {
      c_set_init_label($1); 
    }
    initelt
  | '.' identifier '='
    {
      c_set_init_label($2); 
    }
    initelt
  ;

/* Any kind of declarator(thus, all declarators allowed
   after an explicit typespec).  */

declarator:
    after_type_declarator
    {
      $$ = $1;
    }
  | notype_declarator
    { 
      $$ = $1;
    }
  ;

/* A declarator that is allowed only after an explicit typespec.  */

after_type_declarator:
    '(' after_type_declarator ')'
    {
      $$ = $2; 
    }
  | after_type_declarator '(' parmlist_or_identifiers  %prec '.'
    {
      $$ = c_tree_build_ternary_expr( C_CALL_EXPR, $1, $3, (c_tree_node *)0 );
    }
  | after_type_declarator '[' expr ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr( C_ARRAY_REF, $1, $3 ); 
    }
  | after_type_declarator '[' ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr( C_ARRAY_REF, $1, (c_tree_node *)0 );
    }
  | '*' type_quals after_type_declarator  %prec tok_UNARY
    {
      $$ = c_tree_build_pointer_declarator($2, $3); 
    }
  /* ??? Yuck.  setattrs is a quick hack.  We can't use
     prefix_attributes because $1 only applies to this
     declarator.  We assume setspecs has already been done.
     setattrs also avoids 5 reduce/reduce conflicts(otherwise multiple
     attributes could be recognized here or in `attributes').  */
  | attributes setattrs after_type_declarator
    {
      $$ = $3; 
    }
  | tok_TYPENAME
  ;

/* Kinds of declarator that can appear in a parameter list
   in addition to notype_declarator.  This is like after_type_declarator
   but does not allow a typedef name in parentheses as an identifier
  (because it would conflict with a function with that typedef as arg).  */

parm_declarator:
    parm_declarator '(' parmlist_or_identifiers  %prec '.'
    {
      $$ = c_tree_build_ternary_expr( C_CALL_EXPR, $1, $3,(c_tree_node *)0); 
    }
  | parm_declarator '[' expr ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr( C_ARRAY_REF, $1, $3); 
    }
  | parm_declarator '[' ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr( C_ARRAY_REF, $1, (c_tree_node *)0); 
    }
  | '*' type_quals parm_declarator  %prec tok_UNARY
    {
      $$ = c_tree_build_pointer_declarator($2, $3); 
    }
  /* ??? Yuck.  setattrs is a quick hack.  We can't use
     prefix_attributes because $1 only applies to this
     declarator.  We assume setspecs has already been done.
     setattrs also avoids 5 reduce/reduce conflicts(otherwise multiple
     attributes could be recognized here or in `attributes').  */
  | attributes setattrs parm_declarator
    {
      $$ = $3; 
    }
  | tok_TYPENAME
  ;

/* A declarator allowed whether or not there has been
   an explicit typespec.  These cannot redeclare a typedef-name.  */

notype_declarator:
    notype_declarator '(' parmlist_or_identifiers  %prec '.'
    {
      $$ = c_tree_build_ternary_expr(C_CALL_EXPR, $1, $3,(c_tree_node *)0); 
    }
  | '(' notype_declarator ')'
    {
      $$ = $2; 
    }
  | '*' type_quals notype_declarator  %prec tok_UNARY
    {
      $$ = c_tree_build_pointer_declarator($2, $3); 
    }
  | notype_declarator '[' expr ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr(C_ARRAY_REF, $1, $3); 
    }
  | notype_declarator '[' ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr(C_ARRAY_REF, $1,(c_tree_node *)0); 
    }
  /* ??? Yuck.  setattrs is a quick hack.  We can't use
     prefix_attributes because $1 only applies to this
     declarator.  We assume setspecs has already been done.
     setattrs also avoids 5 reduce/reduce conflicts(otherwise multiple
     attributes could be recognized here or in `attributes').  */
  | attributes setattrs notype_declarator
    {
      $$ = $3; 
    }
  | tok_IDENTIFIER
    {
      $$ = $1;
    }
  ;

structsp:
    tok_STRUCT identifier '{'
    {
      $$ = c_start_struct(C_RECORD_TYPE, $2);
      /* Start scope of tag before parsing components.  */
    }
    component_decl_list '}' maybe_attribute 
    {
      $$ = c_finish_struct($<ttype>4, $5, $7); 
    }
  | tok_STRUCT '{' component_decl_list '}' maybe_attribute
    {
      $$ = c_finish_struct(c_start_struct(C_RECORD_TYPE,(c_tree_node *)0), $3, $5);
    }
  | tok_STRUCT identifier
    {
      $$ = c_xref_tag(C_RECORD_TYPE, $2); 
    }
  | tok_UNION identifier '{'
    {
      $$ = c_start_struct(C_UNION_TYPE, $2); 
    }
    component_decl_list '}' maybe_attribute
    {
      $$ = c_finish_struct($<ttype>4, $5, $7); 
    }
  | tok_UNION '{' component_decl_list '}' maybe_attribute
    {
      $$ = c_finish_struct(c_start_struct(C_UNION_TYPE,(c_tree_node *)0), $3, $5);
    }
  | tok_UNION identifier
    {
      $$ = c_xref_tag(C_UNION_TYPE, $2); 
    }
  | tok_ENUM identifier '{'
    {
# ifdef LUDO_NO_SKIP
      $<itype>3 = suspend_momentary();
# endif
      $$ = c_start_enum($2); 
    }
    enumlist maybecomma_warn '}' maybe_attribute
    {
      $$ = c_finish_enum($<ttype>4, c_tree_reverse_list($5), $8);
      c_resume_momentary($<itype>3); 
    }
  | tok_ENUM '{'
    {
# ifdef LUDO_NO_SKIP
      $<itype>2 = suspend_momentary();
# endif
      $$ = c_start_enum((c_tree_node *)0); 
    }
    enumlist maybecomma_warn '}' maybe_attribute
    {
      $$ = c_finish_enum($<ttype>3, c_tree_reverse_list($4), $7);
      c_resume_momentary($<itype>2); 
    }
  | tok_ENUM identifier
    {
      $$ = c_xref_tag(C_ENUMERAL_TYPE, $2); 
    }
  ;

maybecomma:
    /* empty */
  | ','
  ;

maybecomma_warn:
    /* empty */
  | ','
    {
      if (c_pedantic)
      {
        pedwarn("comma at end of enumerator list"); 
      }
    }
  ;

component_decl_list:
    component_decl_list2
    {
      $$ = $1; 
    }
  | component_decl_list2 component_decl
    {
      $$ = c_tree_concat_list($1, $2);
      pedwarn("no semicolon at end of struct or union"); 
    }
  ;

component_decl_list2:  /* empty */
    {
      $$ = (c_tree_node *)0; 
    }
  | component_decl_list2 component_decl ';'
    {
      $$ = c_tree_concat_list($1, $2); 
    }
  | component_decl_list2 ';'
    {
      if (c_pedantic)
      {
        pedwarn("extra semicolon in struct or union specified"); 
      }
    }
  ;

/* There is a shift-reduce conflict here, because `components' may
   start with a `typename'.  It happens that shifting(the default resolution)
   does the right thing, because it treats the `typename' as part of
   a `typed_typespecs'.

   It is possible that this same technique would allow the distinction
   between `notype_initdecls' and `initdecls' to be eliminated.
   But I am being cautious and not trying it.  */

component_decl:
    typed_typespecs setspecs components
    {
      $$ = $3;
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | typed_typespecs
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids member declarations with no members");
      }
      c_shadow_tag($1);
      $$ = (c_tree_node *)0; 
    }
  | nonempty_type_quals setspecs components
    {
      $$ = $3;
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | nonempty_type_quals
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids member declarations with no members");
      }
      c_shadow_tag($1);
      $$ = (c_tree_node *)0; 
    }
  | error
    {
      $$ =(c_tree_node *)0; 
    }
  | extension component_decl
    {
      $$ = $2;
      c_pedantic = $<itype>1; 
    }
  ;

components:
    component_declarator
  | components ',' component_declarator
    {
      $$ = c_tree_concat_list($1, $3); 
    }
  ;

component_declarator:
    save_filename save_lineno declarator maybe_attribute
    {
      $$ = c_grokfield($1, $2, $3, current_declspecs,(c_tree_node *)0);
      c_decl_attributes($$, $4, prefix_attributes); 
    }
  | save_filename save_lineno
    declarator ':' expr_no_commas maybe_attribute
    {
      $$ = c_grokfield($1, $2, $3, current_declspecs, $5);
      c_decl_attributes($$, $6, prefix_attributes); 
    }
  | save_filename save_lineno ':' expr_no_commas maybe_attribute
    {
      $$ = c_grokfield($1, $2,(c_tree_node *)0, current_declspecs, $4);
      c_decl_attributes($$, $5, prefix_attributes); 
    }
  ;

/* We chain the enumerators in reverse order.
   They are put in forward order where enumlist is used.
  (The order used to be significant, but no longer is so.
   However, we still maintain the order, just to be clean.)  */

enumlist:
    enumerator
  | enumlist ',' enumerator
    {
      if ($1 == c_error_mark_node)
      {
        $$ = $1;
      }
      else
      {
        $$ = c_tree_concat_list($3, $1); 
      }
    }
  | error
    {
      $$ = c_error_mark_node; 
    }
  ;


enumerator:
    identifier
    {
      $$ = c_build_enumerator($1,(c_tree_node *)0); 
    }
  | identifier '=' expr_no_commas
    {
      $$ = c_build_enumerator($1, $3); 
    }
  ;

typename:
  typed_typespecs absdcl
    {
      $$ = c_tree_build_list($1, $2); 
    }
  | nonempty_type_quals absdcl
    {
      $$ = c_tree_build_list($1, $2); 
    }
  ;

absdcl:   /* an absolute declarator */
  /* empty */
    {
      $$ = (c_tree_node *)0; 
    }
  | absdcl1
  ;

nonempty_type_quals:
    tok_TYPE_QUAL
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $1,(c_tree_node *)0); 
    }
  | nonempty_type_quals tok_TYPE_QUAL
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  ;

type_quals:
    /* empty */
    {
      $$ = (c_tree_node *)0; 
    }
  | type_quals tok_TYPE_QUAL
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, $2, $1); 
    }
  ;

absdcl1:  /* a nonempty absolute declarator */
    '(' absdcl1 ')'
    {
      $$ = $2; 
    }
    /* `(typedef)1' is `int'.  */
  | '*' type_quals absdcl1  %prec tok_UNARY
    {
      $$ = c_tree_build_pointer_declarator($2, $3); 
    }
  | '*' type_quals  %prec tok_UNARY
    {
      $$ = c_tree_build_pointer_declarator($2,(c_tree_node *)0); 
    }
  | absdcl1 '(' parmlist  %prec '.'
    {
      $$ = c_tree_build_ternary_expr(C_CALL_EXPR, $1, $3,(c_tree_node *)0); 
    }
  | absdcl1 '[' expr ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr(C_ARRAY_REF, $1, $3); 
    }
  | absdcl1 '[' ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr(C_ARRAY_REF, $1,(c_tree_node *)0); 
    }
  | '(' parmlist  %prec '.'
    {
      $$ = c_tree_build_ternary_expr( C_CALL_EXPR, (c_tree_node *)0,
                                        $2,(c_tree_node *)0); 
    }
  | '[' expr ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr(C_ARRAY_REF,(c_tree_node *)0, $2); 
    }
  | '[' ']'  %prec '.'
    {
      $$ = c_tree_build_binary_expr(C_ARRAY_REF,(c_tree_node *)0,(c_tree_node *)0); 
    }
  /* ??? It appears we have to support attributes here, however
     using prefix_attributes is wrong.  */
  ;

/* at least one statement, the first of which parses without error.  */
/* stmts is used only after decls, so an invalid first statement
   is actually regarded as an invalid decl and part of the decls.  */

stmts:
  lineno_stmt_or_labels
    {
      if (c_pedantic && $1.ends_in_label)
      {
        pedwarn("ANSI C forbids label at end of compound statement");
      }

      $$ = $1;
    }
  ;

lineno_stmt_or_labels:
    lineno_stmt_or_label
    {
      $$ = $1;
    }
  | lineno_stmt_or_labels lineno_stmt_or_label
    {
      $$.stmt = c_tree_concat_list( $2.stmt, $1.stmt );
      $$.ends_in_label = $2.ends_in_label;
    }
  | lineno_stmt_or_labels errstmt
    {
      $$.stmt = $1.stmt;
      $$.ends_in_label = 0;
    }
  ;

xstmts:
  /* empty */
    {
      $$.ends_in_label = 0;
      $$.stmt = (c_tree_node *)0;
    }
  | stmts
    {
      $$ = $1;
    }
  ;

errstmt:  error ';'
  ;

pushlevel:  /* empty */
    {
      c_emit_line_note(c_input_filename, c_lineno);
      c_push_level(0);
# ifdef LUDO_NO_SKIP
      clear_last_expr();
      push_momentary();
      expand_start_bindings(0);
# endif
    }
  ;

/* Read zero or more forward-declarations for labels
   that nested functions can jump to.  */
maybe_label_decls:
    /* empty */
  | label_decls
    {
      if (c_pedantic)
      {
        pedwarn("ANSI C forbids label declarations"); 
      }
    }
  ;

label_decls:
    label_decl
  | label_decls label_decl
  ;

label_decl:
    tok_LABEL identifiers_or_typenames ';'
    {
      c_tree_node *link;
      for(link = $2; link; link = CTreeChain(link))
      {
        c_tree_node *label = c_shadow_label(CTreeListValue(link));
        CSetTreeDeclDeclaredLabel(label);
        /*
        c_declare_nonlocal_label(label);
        */
      }
    }
  ;

/* This is the body of a function definition.
   It causes syntax errors to ignore to the next openbrace.  */
compstmt_or_error:
    compstmt
    {
      $$ = $1;
    }
  | error compstmt
    {
      $$ = $2;
    }
  ;

compstmt_start: '{'
    {
      compstmt_count++; 
    }

compstmt: compstmt_start '}'
    {
# ifdef LUDO_NO_SKIP
      $$ = c_convert_expr(c_void_type_node, c_integer_zero_node); 
# else
      $$ = (c_tree_node *)0;
# endif
    }
  | compstmt_start pushlevel maybe_label_decls decls xstmts '}'
    {
      c_emit_line_note(c_input_filename, c_lineno);
# ifdef LUDO_NO_SKIP
      expand_end_bindings(c_get_decls(), 1, 0);
# endif

      $$ = c_pop_level(1, 1, 0);
      $5.stmt = c_tree_reverse_list( $5.stmt );

      if ( $$ != (c_tree_node *)0 )
      {
        CTreeBlockBody( $$ ) = $5.stmt;
      }
      else
      {
        $$ = $5.stmt;
      }

# ifdef LUDO_NO_SKIP
      if (yychar == CONSTANT || yychar == STRING)
        pop_momentary_nofree();
      else
        pop_momentary(); 
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | compstmt_start pushlevel maybe_label_decls error '}'
    {
      c_emit_line_note(c_input_filename, c_lineno);
# ifdef LUDO_NO_SKIP
      expand_end_bindings(getdecls(), c_kept_level_p(), 0);
# endif

      $$ = c_pop_level(c_kept_level_p(), 0, 0);

# ifdef LUDO_NO_SKIP
      if (yychar == CONSTANT || yychar == STRING)
        pop_momentary_nofree();
      else
        pop_momentary(); 
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | compstmt_start pushlevel maybe_label_decls stmts '}'
    {
      c_emit_line_note(c_input_filename, c_lineno);
# ifdef LUDO_NO_SKIP
      expand_end_bindings(getdecls(), c_kept_level_p(), 0);
# endif

      $$ = c_pop_level(c_kept_level_p(), 0, 0);
      $4.stmt = c_tree_reverse_list( $4.stmt );

      if ( $$ != (c_tree_node *)0 )
      {
        CTreeBlockBody( $$ ) = $4.stmt;
      }
      else
      {
        $$ = $4.stmt;
      }

# ifdef LUDO_NO_SKIP
      if (yychar == CONSTANT || yychar == STRING)
        pop_momentary_nofree();
      else
        pop_momentary(); 
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  ;

/* Value is number of statements counted as of the closeparen.  */
simple_if:
    if_prefix lineno_labeled_stmt
    {
      $$ = $1;
      CTreeInstIfThen( $$ ) = c_tree_reverse_list( $2 );
    }
/* Make sure c_expand_end_cond is run once
   for each call to c_expand_start_cond.
   Otherwise a crash is likely.  */
  | if_prefix error
  {
    $$ = $1;
  }
  ;

if_prefix:
    tok_IF '(' expr ')'
    {
      c_emit_line_note($<filename>-1, $<lineno>0);
      $3 = c_truthvalue_conversion( $3 );
# ifdef LUDO_NO_SKIP
      c_expand_start_cond($3, 0, compstmt_count);
# endif
      $<itype>$ = stmt_count;
      if_stmt_file = $<filename>-1;
      if_stmt_line = $<lineno>0;
      c_position_after_white_space(); 

      $$ = c_tree_build_inst( C_IF_INST );
      CTreeInstIfCond( $$ ) = $3;
    }
  ;

/* This is a subroutine of stmt.
   It is used twice, once for valid DO statements
   and once for catching errors in parsing the end test.  */
do_stmt_start:
    tok_DO
    {
      stmt_count++;
      compstmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
      /* See comment in `while' alternative, above.  */
# ifdef LUDO_NO_SKIP
      emit_nop();
      expand_start_loop_continue_elsewhere(1);
# endif
      c_position_after_white_space(); 
    }
    lineno_labeled_stmt tok_WHILE
    {
# ifdef LUDO_NO_SKIP
      expand_loop_continue_here(); 
# endif
      $$ = c_tree_build_inst( C_DO_INST );
      CTreeInstDoBody( $$ ) = c_tree_reverse_list( $3 );
    }
  ;

save_filename:
    {
      $$ = c_input_filename; 
    }
  ;

save_lineno:
    {
      $$ = c_lineno; 
    }
  ;

lineno_labeled_stmt:
    save_filename save_lineno stmt
    {
      $$ = $3;
    }
  | save_filename save_lineno label lineno_labeled_stmt
    {
      c_tree_node *label = c_tree_add_head_list( (c_tree_node *)0, $3, (c_tree_node *)0 );
      $$ = c_tree_concat_list( $4, label );
    }
  ;

lineno_stmt_or_label:
    save_filename save_lineno stmt_or_label
    {
      $$ = $3; 
    }
  ;

stmt_or_label:
    stmt
    {
      $$.stmt = $1;
      $$.ends_in_label = 0; 
    }
  | label
    {
      c_tree_node *label = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
      $$.stmt = label;
      $$.ends_in_label = 1; 
    }
  ;

/* Parse a single real statement, not including any labels.  */
stmt:
    compstmt
    {
      stmt_count++; 
      $$ = $1;
    }
    | all_iter_stmt 
    {
      $$ = $1;
    }
    | expr ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
/* It appears that this should not be done--that a non-lvalue array
   shouldn't get an error if the value isn't used.
   Section 3.2.2.1 says that an array lvalue gets converted to a pointer
   if it appears as a top-level expression,
   but says nothing about non-lvalue arrays.  */
# ifdef LUDO_NO_SKIP
      c_iterator_expand($1);
      clear_momentary(); 
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
  | simple_if tok_ELSE
    {
# ifdef LUDO_NO_SKIP
      c_expand_start_else();
      $<itype>1 = stmt_count;
# endif
      c_position_after_white_space(); 
    }
    lineno_labeled_stmt
    {
# ifdef LUDO_NO_SKIP
      c_expand_end_cond();
      if (c_extra_warnings && stmt_count == $<itype>1)
      {
        warning("empty body in an else-statement"); 
      }
# endif

      CTreeInstIfElse( $1 ) = c_tree_reverse_list( $4 );
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
  | simple_if %prec tok_IF
    {
# ifdef LUDO_NO_SKIP
      c_expand_end_cond();
      /* This warning is here instead of in simple_if, because we
         do not want a warning if an empty if is followed by an
         else statement.  Increment stmt_count so we don't
         give a second error if this is a nested `if'.  */
      if (c_extra_warnings && stmt_count++ == $<itype>1)
      {
        warning_with_file_and_line(if_stmt_file, if_stmt_line,
            "empty body in an if-statement"); 
      }
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
/* Make sure c_expand_end_cond is run once
   for each call to c_expand_start_cond.
   Otherwise a crash is likely.  */
  | simple_if tok_ELSE error
    {
# ifdef LUDO_NO_SKIP
      c_expand_end_cond(); 
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
  | tok_WHILE
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      /* The emit_nop used to come before emit_line_note,
         but that made the nop seem like part of the preceding line.
         And that was confusing when the preceding line was
         inside of an if statement and was not really executed.
         I think it ought to work to put the nop after the line number.
         We will see.  --rms, July 15, 1991.  */
      emit_nop(); 
# endif
    }
    '(' expr ')'
    {
# ifdef LUDO_NO_SKIP
    /* Don't start the loop till we have succeeded
         in parsing the end test.  This is to make sure
         that we end every loop we start.  */
      expand_start_loop(1);
# endif
      c_emit_line_note(c_input_filename, c_lineno);
      $4 = c_truthvalue_conversion( $4 );
# ifdef LUDO_NO_SKIP
      expand_exit_loop_if_false(NULL_PTR, $4 );
# endif
      c_position_after_white_space(); 
    }
    lineno_labeled_stmt
    {
# ifdef LUDO_NO_SKIP
      expand_end_loop(); 
# endif
      $$ = c_tree_build_inst( C_WHILE_INST );
      CTreeInstWhileCond( $$ ) = $4;
      CTreeInstWhileBody( $$ ) = c_tree_reverse_list( $7 );

      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | do_stmt_start
    '(' expr ')' ';'
    {
      c_emit_line_note(c_input_filename, c_lineno);
      $3 = c_truthvalue_conversion( $3 );
# ifdef LUDO_NO_SKIP
      expand_exit_loop_if_false(NULL_PTR, $3 );
      expand_end_loop();
      clear_momentary(); 
# endif
      $$ = $1;
      CTreeInstDoCond( $$ ) = $3;

      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
/* This rule is needed to make sure we end every loop we start.  */
  | do_stmt_start error
    {
# ifdef LUDO_NO_SKIP
      expand_end_loop();
      clear_momentary(); 
# endif
      $$ = c_tree_add_head_list( (c_tree_node *)0, $1, (c_tree_node *)0 );
    }
  | tok_FOR
    '(' xexpr ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      /* See comment in `while' alternative, above.  */
      emit_nop();
      if ($3) c_expand_expr_stmt($3);
      /* Next step is to call expand_start_loop_continue_elsewhere,
         but wait till after we parse the entire for(...).
         Otherwise, invalid input might cause us to call that
         fn without calling expand_end_loop.  */
# endif
    }
    xexpr ';'
    /* Can't emit now; wait till after expand_start_loop...  */
    {
      $<lineno>7  = c_lineno;
      $<filename>$ = c_input_filename; 
    }
    xexpr ')'
    {
# ifdef LUDO_NO_SKIP
    
      /* Start the loop.  Doing this after parsing
         all the expressions ensures we will end the loop.  */
      expand_start_loop_continue_elsewhere(1);
# endif
      /* Emit the end-test, with a line number.  */
      c_emit_line_note($<filename>8, $<lineno>7);

      if ( $6 )
      {
        $6 = c_truthvalue_conversion( $6 );
# ifdef LUDO_NO_SKIP
        expand_exit_loop_if_false(NULL_PTR, $6 );
      /* Don't let the tree nodes for $9 be discarded by
         clear_momentary during the parsing of the next stmt.  */
        push_momentary();
# endif
      }
      $<lineno>7 = c_lineno;
      $<filename>8 = c_input_filename;
      c_position_after_white_space(); 
    }
    lineno_labeled_stmt
    {
    /* Emit the increment expression, with a line number.  */
      c_emit_line_note($<filename>8, $<lineno>7);
# ifdef LUDO_NO_SKIP
      expand_loop_continue_here();
      if ($9)
        c_expand_expr_stmt($9);
      if (yychar == CONSTANT || yychar == STRING)
        pop_momentary_nofree();
      else
        pop_momentary();
      expand_end_loop(); 
# endif
      $$ = c_tree_build_inst( C_FOR_INST );
      CTreeInstForStart( $$ ) = $3;
      CTreeInstForCond( $$ )  = $6;
      CTreeInstForInc( $$ )   = $9;
      CTreeInstForBody( $$ )  = $12;

      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | tok_SWITCH '(' expr ')'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      c_expand_start_case($3);
      /* Don't let the tree nodes for $3 be discarded by
         clear_momentary during the parsing of the next stmt.  */
      push_momentary();
# endif
      c_position_after_white_space(); 
    }
    lineno_labeled_stmt
    {
# ifdef LUDO_NO_SKIP
      expand_end_case($3);
      if (yychar == CONSTANT || yychar == STRING)
        pop_momentary_nofree();
      else
        pop_momentary(); 
# endif

      $$ = c_tree_build_inst( C_SWITCH_INST );
      CTreeInstSwitchOn( $$ )   = $3;
      CTreeInstSwitchBody( $$ ) = $6;
    }
  | tok_BREAK ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      if ( ! expand_exit_something())
        error("break statement not within loop or switch"); 
# endif
      $$ = c_tree_build_inst( C_BREAK_INST );
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | tok_CONTINUE ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      if (! expand_continue_loop(NULL_PTR))
        error("continue statement not within a loop"); 
# endif
      $$ = c_tree_build_inst( C_CONTINUE_INST );
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | tok_RETURN ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      c_expand_return((c_tree_node *)0); 
# endif
      $$ = c_tree_build_inst( C_RETURN_INST );
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | tok_RETURN expr ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      c_expand_return($2); 
# endif
      $$ = c_tree_build_inst( C_RETURN_INST );
      CTreeInstReturnValue( $$ ) = $2;

      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | tok_ASM_KEYWORD maybe_type_qual '(' expr ')' ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
      CStripNops($4);
       
      if (( CTreeExprCode($4) == C_ADDR_EXPR
           && CTreeNodeFirstCode( CTreeExprOperand($4, 0)) == C_STRING_NODE)
          || CTreeNodeFirstCode($4) == C_STRING_NODE)
      {
# ifdef LUDO_NO_SKIP
        expand_asm($4);
# endif
      }
      else
      {
        error("argument of `asm' is not a constant string"); 
      }

      $$ = (c_tree_node *)0;
    }
/* This is the case with just output operands.   */
  | tok_ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ')' ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      c_expand_asm_operands($4, $6,(c_tree_node *)0,(c_tree_node *)0,
           $2 == ridpointers[(int)RID_VOLATILE],
           c_input_filename, c_lineno); 
# endif
      $$ = (c_tree_node *)0;
    }
/* This is the case with input operands as well.  */
  | tok_ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':' asm_operands ')' ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      c_expand_asm_operands($4, $6, $8,(c_tree_node *)0,
           $2 == ridpointers[(int)RID_VOLATILE],
           c_input_filename, c_lineno); 
# endif
      $$ = (c_tree_node *)0;
    }
/* This is the case with clobbered registers as well. */
  | tok_ASM_KEYWORD maybe_type_qual '(' expr ':' asm_operands ':'
      asm_operands ':' asm_clobbers ')' ';'
    {
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
# ifdef LUDO_NO_SKIP
      c_expand_asm_operands($4, $6, $8, $10, $2 == ridpointers[(int)RID_VOLATILE],
           c_input_filename, c_lineno); 
# endif
      $$ = (c_tree_node *)0;
    }
  | tok_GOTO identifier ';'
    {
      c_tree_node *decl;
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
      decl = c_lookup_label($2);

      if (decl != 0)
      {
        CSetTreeNodeUsed(decl);
# ifdef LUDO_NO_SKIP
        expand_goto(decl);
# endif
      }
      $$ = c_tree_build_inst( C_GOTO_INST );
      CTreeInstGotoLabel( $$ ) = decl;
      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );
    }
  | tok_GOTO '*' expr ';'
    {
      if ( c_pedantic )
      {
        pedwarn("ANSI C forbids `goto *expr;'");
      }
      stmt_count++;
      c_emit_line_note($<filename>-1, $<lineno>0);
      $3 = c_convert_expr(c_ptr_type_node, $3);

      $$ = c_tree_build_inst( C_GOTO_INST );
      CTreeInstGotoLabel( $$ ) = $3;

      $$ = c_tree_add_head_list( (c_tree_node *)0, $$, (c_tree_node *)0 );

# ifdef LUDO_NO_SKIP
      expand_computed_goto($3);
# endif
    }
  | ';'
    {
      $$ = (c_tree_node *)0; 
    }
  ;

all_iter_stmt:
    all_iter_stmt_simple
/*  | all_iter_stmt_with_decl */
  ;

all_iter_stmt_simple:
    tok_FOR '(' primary ')' 
    {
      /* The value returned by this action is  */
      /*      1 if everything is OK */ 
      /*      0 in case of error or already bound iterator */

      $<itype>$ = 0;

      if ( ( CTreeNodeFirstCode($3) != C_DECL_NODE   ) ||
           ( CTreeDeclCode($3) != C_VAR_DECL ) )
      {
        error("invalid `for(ITERATOR)' syntax");
      }
      else if (! CIsTreeDeclIterator($3))
      {
        error("`%s' is not an iterator",
         CTreeIdentPointer(CTreeDeclName($3)));
      }
      else if ( CIsTreeNodeReadOnly($3))
      {
        error("`for(%s)' inside expansion of same iterator",
         CTreeIdentPointer(CTreeDeclName($3)));
      }
      else
      {
        $<itype>$ = 1;
# ifdef LUDO_NO_SKIP
        iterator_for_loop_start($3);
# endif
      }
    }
    lineno_labeled_stmt
    {
      $$ = (c_tree_node *)0;

      if ($<itype>5)
      {
# ifdef LUDO_NO_SKIP
        iterator_for_loop_end($3);
# endif
      }
    }

/* Any kind of label, including jump labels and case labels.
   ANSI C accepts labels only before statements, but we allow them
   also at the end of a compound statement.  */

label:    tok_CASE expr_no_commas ':'
    {
      c_tree_node *value = c_check_case_value($2);
# ifdef LUDO_NO_SKIP
      c_tree_node *label
        = c_tree_build_decl(C_LABEL_DECL,(c_tree_node *)0,(c_tree_node *)0);
# endif

      stmt_count++;

      if (value != c_error_mark_node)
      {
# ifdef LUDO_NO_SKIP
        c_tree_node *duplicate;
        int success = c_push_case(value, c_convert_and_check, label, &duplicate);

        if (success == 1)
        {
          error("case label not within a switch statement");
        }
        else if (success == 2)
        {
          error("duplicate case value");
          error_with_decl(duplicate, "this is the first entry for that value");
        }
        else if (success == 3)
        {
          warning("case value out of range");
        }
        else if (success == 5)
        {
          error("case label within scope of cleanup or variable array");
        }
# endif
      }

      $$ = c_tree_build_inst( C_CASE_INST );
      CTreeInstCaseCode( $$ ) = C_STANDARD_CASE;
      CTreeInstCaseFrom( $$ ) = value;
      CTreeInstCaseTo( $$ )   = value;

      c_position_after_white_space(); 
    }
  | tok_CASE expr_no_commas tok_ELLIPSIS expr_no_commas ':'
    {
      c_tree_node *value1 = c_check_case_value($2);
      c_tree_node *value2 = c_check_case_value($4);
# ifdef LUDO_NO_SKIP
      c_tree_node *label
        = c_tree_build_decl(C_LABEL_DECL,(c_tree_node *)0,(c_tree_node *)0);
# endif

      if (c_pedantic)
      {
        pedwarn("ANSI C forbids case ranges");
      }
      stmt_count++;

      $$ = c_error_mark_node;

      if (value1 != c_error_mark_node && value2 != c_error_mark_node)
      {
# ifdef LUDO_NO_SKIP
        c_tree_node *duplicate;
        int success = c_push_case_range(value1, value2, c_convert_and_check, label,
              &duplicate);
        if (success == 1)
        {
          error("case label not within a switch statement");
        }
        else if (success == 2)
        {
          error("duplicate case value");
          error_with_decl(duplicate, "this is the first entry for that value");
        }
        else if (success == 3)
        {
          warning("case value out of range");
        }
        else if (success == 4)
        {
          warning("empty case range");
        }
        else if (success == 5)
        {
          error("case label within scope of cleanup or variable array");
        }
        else
# endif
      }

      $$ = c_tree_build_inst( C_CASE_INST );
      CTreeInstCaseCode( $$ ) = C_RANGE_CASE;
      CTreeInstCaseFrom( $$ ) = value1;
      CTreeInstCaseTo( $$ )   = value2;
      c_position_after_white_space(); 
    }
  | tok_DEFAULT ':'
    {
# ifdef LUDO_NO_SKIP
      c_tree_node *duplicate;
      c_tree_node *label
        = c_tree_build_decl(C_LABEL_DECL,(c_tree_node *)0,(c_tree_node *)0);
      int success = c_push_case((c_tree_node *)0, 0, label, &duplicate);
# endif
      stmt_count++;

      $$ = c_error_mark_node;

# ifdef LUDO_NO_SKIP
      if (success == 1)
      {
        error("default label not within a switch statement");
      }
      else if (success == 2)
      {
        error("multiple default labels in one switch");
        error_with_decl(duplicate, "this is the first default label");
      }
      else
# endif

      $$ = c_tree_build_inst( C_CASE_INST );
      CTreeInstCaseCode( $$ ) = C_DEFAULT_CASE;
      c_position_after_white_space(); 
    }
  | identifier ':'
    {
      c_tree_node *label = c_define_label(c_input_filename, c_lineno, $1);
      stmt_count++;

# ifdef LUDO_NO_SKIP
      emit_nop();
      if (label)
      {
        expand_label(label);
      }
# endif
      $$ = label;
      c_position_after_white_space(); 
    }
  ;

/* Either a type-qualifier or nothing.  First thing in an `asm' statement.  */

maybe_type_qual:
  /* empty */
    {
      c_emit_line_note(c_input_filename, c_lineno);
      $$ =(c_tree_node *)0; 
    }
  | tok_TYPE_QUAL
    {
      c_emit_line_note(c_input_filename, c_lineno); 
      $$ =(c_tree_node *)0; 
    }
  ;

xexpr:
  /* empty */
    {
      $$ =(c_tree_node *)0; 
    }
  | expr
  ;

/* These are the operands other than the first string and colon
   in  asm("addextend %2,%1": "=dm"(x), "0"(y), "g"(*x))  */
asm_operands: /* empty */
    {
      $$ = (c_tree_node *)0; 
    }
  | nonnull_asm_operands
  ;

nonnull_asm_operands:
    asm_operand
  | nonnull_asm_operands ',' asm_operand
    {
      $$ = c_tree_concat_list($1, $3); 
    }
  ;

asm_operand:
    tok_STRING '(' expr ')'
    {
      $$ = c_tree_build_list($1, $3); 
    }
  ;

asm_clobbers:
    string
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, 
               c_tree_combine_strings($1),(c_tree_node *)0); 
    }
  | asm_clobbers ',' string
    {
      $$ = c_tree_add_head_list((c_tree_node *)0, 
                 c_tree_combine_strings($3), $1); 
    }
  ;

/* This is what appears inside the parens in a function declarator.
   Its value is a list of ..._TYPE nodes.  */
parmlist:
    {
      c_push_level(0);
      c_clear_parm_order();
      c_declare_parm_level(0); 
    }
    parmlist_1
    {
      $$ = $2;
      c_parmlist_tags_warning();
      c_pop_level(0, 0, 0); 
    }
  ;

parmlist_1:
    parmlist_2 ')'
    {
      $$ = $1;
    }
  | parms ';'
    {
      c_tree_node *parm;

      if ( c_pedantic )
      {
        pedwarn("ANSI C forbids forward parameter declarations");
      }
      /* Mark the forward decls as such.  */
      for(parm = c_get_decls(); parm; parm = CTreeChain(parm))
      {
        CSetTreeNodeAsmWritten(parm);
      }
      c_clear_parm_order(); 
    }
    parmlist_1
    {
      $$ = $4; 
    }
  | error ')'
    {
      $$ = c_tree_add_head_list((c_tree_node *)0,(c_tree_node *)0,(c_tree_node *)0); 
    }
  ;

/* This is what appears inside the parens in a function declarator.
   Is value is represented in the format that grokdeclarator expects.  */
parmlist_2:  /* empty */
    {
      $$ = c_get_parm_info(0); 
    }
  | tok_ELLIPSIS
    {
      $$ = c_get_parm_info(0);
      /* Gcc used to allow this as an extension.  However, it does
         not work for all targets, and thus has been disabled.
         Also, since func(...) and func() are indistinguishable,
         it caused problems with the code in expand_builtin which
         tries to verify that BUILT_IN_NEXT_ARG is being used
         correctly.  */
      error("ANSI C requires a named argument before `...'");
    }
  | parms
    {
      $$ = c_get_parm_info(1); 
    }
  | parms ',' tok_ELLIPSIS
    {
      $$ = c_get_parm_info(0); 
    }
  ;

parms:
  parm
    {
      c_push_parm_decl($1); 
    }
  | parms ',' parm
    {
      c_push_parm_decl($3); 
    }
  ;

/* A single parameter declaration or parameter type name,
   as found in a parmlist.  */
parm:
    typed_declspecs setspecs parm_declarator maybe_attribute
    {
      $$ = c_tree_build_list(c_tree_build_list(current_declspecs, $3),
                             c_tree_build_list(prefix_attributes, $4));
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | typed_declspecs setspecs notype_declarator maybe_attribute
    {
      $$ = c_tree_build_list(c_tree_build_list(current_declspecs, $3),
                             c_tree_build_list(prefix_attributes, $4)); 
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | typed_declspecs setspecs absdcl maybe_attribute
    {
      $$ = c_tree_build_list(c_tree_build_list(current_declspecs, $3),
                             c_tree_build_list(prefix_attributes, $4));
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2); 
    }
  | declmods setspecs notype_declarator maybe_attribute
    {
      $$ = c_tree_build_list(c_tree_build_list(current_declspecs, $3),
                               c_tree_build_list(prefix_attributes, $4));
      current_declspecs = CTreeListValue(declspec_stack);
      prefix_attributes = CTreeListPurpose(declspec_stack);
      declspec_stack    = CTreeChain(declspec_stack);
      c_resume_momentary($2);  
    }

  | declmods setspecs absdcl maybe_attribute
    {
      $$ = c_tree_build_list( 
            c_tree_build_list(current_declspecs, $3),
            c_tree_build_list(prefix_attributes, $4));

      current_declspecs = CTreeListValue( declspec_stack );
      prefix_attributes = CTreeListPurpose( declspec_stack );
      declspec_stack    = CTreeChain( declspec_stack );
      c_resume_momentary($2);  
    }
  ;

/* This is used in a function definition
   where either a parmlist or an identifier list is ok.
   Its value is a list of ..._TYPE nodes or a list of identifiers.  */
parmlist_or_identifiers:
    {
      c_push_level(0);
      c_clear_parm_order();
      c_declare_parm_level(1); 
    }
    parmlist_or_identifiers_1
    {
      $$ = $2;
      c_parmlist_tags_warning();
      c_pop_level(0, 0, 0); 
    }
  ;

parmlist_or_identifiers_1:
    parmlist_1
  | identifiers ')'
    {
      c_tree_node *ScanTree;

      for( ScanTree  = $1; 
           ScanTree !=(c_tree_node *)0;
           ScanTree  = ScanTree->COMMON.CHAIN )
      {
        if ( ScanTree->LIST.VALUE ==(c_tree_node *)0 )
        {
          error("`...' in old-style identifier list");
        }
      }

      $$ = c_tree_add_head_list((c_tree_node *)0,(c_tree_node *)0, $1); 
    }
  ;

/* A nonempty list of identifiers.  */
identifiers:
  tok_IDENTIFIER
    {
      $$ = c_tree_build_list((c_tree_node *)0, $1); 
    }
  | identifiers ',' tok_IDENTIFIER
    {
      $$ = c_tree_concat_list( $1, c_tree_build_list((c_tree_node *)0, $3)); 
    }
  ;

/* A nonempty list of identifiers, including typenames.  */
identifiers_or_typenames:
  identifier
    {
      $$ = c_tree_build_list((c_tree_node *)0, $1); 
    }
  | identifiers_or_typenames ',' identifier
    {
      $$ = c_tree_concat_list( $1, c_tree_build_list((c_tree_node *)0, $3)); 
    }
  ;

extension:
  tok_EXTENSION
    {
      $<itype>$ = c_pedantic;
      c_pedantic = 0; 
    }
  ;

%%
