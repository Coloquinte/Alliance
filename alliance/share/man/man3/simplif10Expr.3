.\"   $Id: simplif10Expr.3,v 1.1 1999/05/31 17:30:25 alliance Exp $
.\" @(#)simplif10Expr.2 7.01 92/08/22 ; Labo masi cao-vlsi; Author : Luc Burgun
.TH SIMPLIF10EXPR 3 "October 1, 1997" "ASIM/LIP6" "ABL functions"
.so man1/alc_origin.1
.SH NAME
\fBsimplif10Expr\fP \- makes simplifications on an expression including constant atomic expressions
.SH SYNOPSYS
.nf
#include "logmmm.h"
chain_list *simplif10Expr(expr)
chain_list *expr;
.fi
.SH PARAMETER
.TP 20
\fIexpr\fP
expression to simplify
.SH DESCRIPTION
\fBsimplif10Expr()\fP makes simplifications by applying the following rules :
.br
.TP
(or 0 x1 x2 ... xn) --> (or x1 x2 ... xn)  if n>1
.TP
(or 1 x1 x2 ... xn) --> 1 
.TP
(or 0 x1) --> x1
.TP
(and 0 x1 x2 ... xn) --> 0 
.TP
(and 1 x1 x2 ... xn) --> (and x1 x2 ... xn)  if n>1
.TP
(and 1 x1) --> x1
.TP
(nor 0 x1 x2 ... xn) --> (nor x1 x2 ... xn)  if n>1
.TP
(nor 1 x1 x2 ... xn) --> 0 
.TP
(nor 0 x1) --> (not x1)
.TP
(nand 0 x1 x2 ... xn) --> 1 
.TP
(nand 1 x1 x2 ... xn) --> (nand x1 x2 ... xn)  if n>1
.TP
(nand 1 x1) --> (not x1)
.TP
(xor 0 x1 x2 ... xn) --> (xor x1 x2 ... xn)  if n>1
.TP
(xor 1 x1 x2 ... xn) --> (not (xor x1 x2 ... xn))  if n>1
.TP
(xor 1 x1) --> (not x1)
.TP
(xor 0 x1) --> x1
.TP
(not 1) --> 0
.TP
(not 0) --> 1
.SH EXAMPLE
.nf
#include "mutnnn.h"		/* mbk utilities */
#include "logmmm.h"
chain_list *expr1,*expr2; 

/* let's suppose that expr1 = (OR (OR 1 (NOT a)) (NAND 0 (NOT b))) */

expr2 = simplif10Expr(expr1); 
displayExpr(expr2);
/* it will display
1
*/
freeExpr(expr1);
freeExpr(expr2);
.fi
.SH SEE ALSO
.BR log (1),
.BR abl (1),
.BR simplifNotExpr (3),
.BR devXorExpr (3),
.BR devXor2Expr (3),
.BR notExpr (3),
.BR flatPolarityExpr (3),
.BR flatArityExpr (3),
.BR sortExpr(3),
.BR normExpr(3).

.so man1/alc_bug_report.1

