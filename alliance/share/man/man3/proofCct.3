.\"   $Id: proofCct.3,v 1.1 1999/05/31 17:30:24 alliance Exp $
.\" @(#)proofCct.2 7.01 92/08/22 ; Labo masi cao-vlsi; Author : Luc Burgun
.TH PROOFCCT 3 "October 1, 1997" "ASIM/LIP6" "BDD functions"
.so man1/alc_origin.1
.SH NAME
\fBproofCct\fP \- checks the equivalence of two circuits 
.SH SYNOPSYS
.nf
#include "logmmm.h"
int proofCct(pC1,pC2)
pCircuit pC1;
pCircuit pC2;
.fi
.SH PARAMETERS
.TP 20
\fIpC1\fP
first circuit to proof
.TP 20
\fIpC2\fP
second circuit to proof
.SH DESCRIPTION
\fBproofCct()\fP checks the logical equivalence of \fIpC1\fP and \fIpC2\fP. In order to correctly compare the two description, the circuits must contains the same primary inputs, primary outputs and association order of the primary inputs with the indexes (You can use for example the \fBcpOrderCct()\fP function).
.SH EXAMPLE
.nf
#include "mutnnn.h"		/* mbk utilities */
#include "logmmm.h"
pCircuit pC1,pC2;
chain_list *expr;

initializeBdd(SMALL_BDD);
pC1 = initializeCct("circuit 1",10,10);
pC2= initializeCct("circuit 2",10,10);

	/* let's suppose that pC1 and pC2 are set */

proofCct(pC1,pC2)

/* it will display 
************* PROOF between circuit 1 & circuit 2 **********
OUTPUT = s1 is equal
OUTPUT = s2 is different
s2 = (AND a b)
s2 = (AND (OR a b) c)
*********************** END OF PROOF ***********************
*/

destroyCct(pC1);
destroyCct(pC2);
destroyBdd(1);
.fi
.SH SEE ALSO
.BR log (1),
.BR bdd (1),
.BR cpOrderCct (3),
.BR gcNodeCct (3).

.so man1/alc_bug_report.1

