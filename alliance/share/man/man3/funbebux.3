.\"   $Id: funbebux.3,v 1.1 1999/05/31 17:30:21 alliance Exp $
.\" @(#)bebux.2 108 Feb 15 1995 UPMC ; Pirouz BAZARGAN SABET
.TH FUNBEBUX 3 "October 1, 1997" "ASIM/LIP6" "BEH functions"

.so man1/alc_origin.1
.SH NAME
.PP
\fBbeh_addbebux , beh_delbebux , beh_rmvbebux , beh_frebebux\fP

.SH SYNOPSYS
.PP
.nf
struct bebux *beh_addbebux (list, name, biabl, bibdd, type)
struct bebux *list;
char *name;
struct biabl *biabl;
struct binode *bibdd;
char type;

struct bebux *beh_delbebux (list, pnt, mode)
struct bebux *list;
struct bebux *pnt;
char mode;

struct bebux *beh_rmvbebux (list, name, mode)
struct bebux *list;
char *name;
char mode;

void beh_frebebux (list)
struct bebux *list;
.fi

.SH PARAMETERS
.PP
.TP 10
\fIlist\fP
pointer of a list of bebux structures
.TP 10
\fIname\fP
name of the bused internal signal to be added to or removed from the list
.TP 10
\fIbiabl\fP
list of biabl representing the expression of drivers setting the value of
the bused internal signal
.TP 10
\fIbibdd\fP
list of bibdd representing the expression of drivers setting the value of
the bused internal signal
.TP 10
\fIpnt\fP
pointer of the bebux structure to be removed from the list
.TP 10
\fItype\fP
type of the bused internal signal :
.RS
.TP 5
W
for a WOR_BIT
.TP 5
M
for a MUX_BIT
.RE
.TP 10
\fImode\fP
recursive mode (Y or N)

.SH DESCRIPTION
.PP
A bebux is a data structure representing a one\-bit bused internal signal.

.PP
\fBbeh_addbebux()\fP adds a bebux structure at the top of a list of bebux
structures. The name registred in the bebux structure is produced by
\fBnamealloc()\fP. The function returns the pointer of the new list.
No checks are made by this function.

.PP
\fBbeh_delbebux()\fP deletes a bebux structure (pointed by \fIpnt\fP) from a
list of bebux structures. The function returns the pointer of the new list.
No action is made if the structure pointed by \fIpnt\fP doesn't belong to the
list. If \fImode\fP is set to 'Y' all objects (biabl, binode) pointed by the
bebux will also be deleted. If \fImode\fP is set to 'N' and there is any object
(biabl, binode) pointed by the bebux a warning message is printed on the
standard error output.

.PP
\fBbeh_rmvbebux()\fP deletes a bebux structure (named \fIname\fP) from a list
of bebux structures. \fIname\fP is supposed to be produced by \fBnamealloc()\fP.
The function returns the pointer of the new list.
No action is made if no structure named \fIname\fP has been found in the list.
If \fImode\fP is set to 'Y' all objects (biabl, binode) pointed by the bebux
will also be deleted. If \fImode\fP is set to 'N' and there is any object
(biabl, binode) pointed by the bebux a warning message is printed on the
standard error output.

.PP
\fBbeh_frebebux()\fP deletes a list of bebux structures (pointed by
\fIlist\fP) and all objects (biabl, binode) pointed by any bebux structure of
the list. No action is made if \fIlist\fP is an empty list (NULL pointer).
No checks are made by this function.

.SH EXAMPLE
.PP
.nf
#include <beh108.h>

struct bebux *list;
char *name;

name = namealloc ("data_bus_0");
list = beh_addbebux (list,"result_bus_0", NULL, NULL, 'M');
list = beh_rmvbebux (list,name);
.fi

.SH SEE ALSO
.PP
beh(3), log(1), biabl(3), binode(3), bebux(3), namealloc(3)


.so man1/alc_bug_report.1

