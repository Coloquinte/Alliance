.\"   $Id: sortautarray.3,v 1.1 1999/05/31 17:30:25 alliance Exp $
.\" @(#)sortautarray.2 2.7 96/07/02 ; Labo masi cao-vlsi; Author : Jacomme Ludovic
.TH SORTAUTARRAY 3 "October 1, 1997" "ASIM/LIP6" "AUT FUNCTIONS"
.SH NAME
sortautarray \- heap sort.
.so man1/alc_origin.1
.SH SYNOPSYS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
#include "aut101.h"
void sortautarray( ValueArray, IndexArray, ArraySize, FuncCompare )
  void  \(**ValueArray;
  long  \(**IndexArray;
  long   ArraySize;
  long (\(**FuncCompare)();
.ft R
.fi
.SH PARAMETERS
.TP 20
\fIValueArray\fP
Array of values to be compared.
.TP
\fIIndexArray\fP
Array of indexes.
.TP
\fIArraySize\fP
Size of the arrays.
.TP
\fIFuncCompare\fP
The name of the comparison function.
.SH DESCRIPTION
\fBsortautarray\fP is an implementation of the heap-sort algorithm.
It sorts an array of values pointed by \fIValueArray\fP, and saves the
values order in the array of indexes pointed by \fIIndexArray\fP.
The comparison function is called with three arguments. The First is
a pointer to the  array of values, the second one and the last one is 
respectively the index of the first and second value being compared.
If \fIFuncCompare\fP is a null pointer, a default comparison function
is used and sort \fIValueArray\fP in decrease order.
\fIValueArray\fP is not modified by this function, and this seems to
be usefull in many cases. A the end \fIIndexArray\fP contains the 
indexes of the sorted values.
.br
.SH RETURN VALUE
\fBsortautarray\fP returns nothing.
.SH EXAMPLE
.ta 3n 6n 9n 12n 15n 18n 21n
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
#include "aut101.h"
  long SortCompare( ValueArray, Index1, Index2 )
    long \(**ValueArray;
    long  Index1;
    long  Index2;
  {
    return( ValueArray[ Index2 ] - ValueArray[ Index1 ] );
  }
  ...
  long ValueArray[ 5 ] = { 3, 2, 1, 5, 4 };
  long IndexArray[ 5 ];
  sortautarray( ValueArray, IndexArray, 5, NULL );
  /* display 5 4 3 2 1 */
  for ( Counter = 0; Counter < 5; Counter++ )
  {
    printf( " %d", ValueArray[ IndexArray[ Counter ] ] );
  }
  printf( "\n" );
  sortautarray( ValueArray, IndexArray, SortCompare );
  /* display 1 2 3 4 5 */
  for ( Counter = 0; Counter < 5; Counter++ )
  {
    printf( " %d", ValueArray[ IndexArray[ Counter ] ] );
  }
  printf( "\n" );
.ft R
.fi
.SH SEE ALSO
.BR aut (1)


.so man1/alc_bug_report.1

