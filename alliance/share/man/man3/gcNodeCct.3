.\"   $Id: gcNodeCct.3,v 1.1 1999/05/31 17:30:21 alliance Exp $
.\" @(#)gcNodeCct.2 7.01 92/08/22 ; Labo masi cao-vlsi; Author : Luc Burgun
.TH GCNODECCT 3 "October 1, 1997" "ASIM/LIP6" "BDD functions"
.so man1/alc_origin.1
.SH NAME
\fBgcNodeCct\fP \- does a garbage collection 
.SH SYNOPSYS
.nf
#include "logmmm.h"
void gcNodeCct(pC)
pCircuit pC;
.fi
.SH PARAMETER
.TP 20
\fIpC\fP
circuit on which the nodes are saved
.SH DESCRIPTION
\fBgcNodeCct()\fP does a garbarge collection by removing the nodes that aren't pointed in \fIpC\fP.
.SH EXAMPLE
.nf
#include "mutnnn.h"		/* mbk utilities */
#include "logmmm.h"
pCircuit pC;
chain_list *expr;

initializeBdd(SMALL_BDD);
pC = initializeCct("circuit 1",10,10);

addInputCct(pC,"a");
addInputCct(pC,"b");

	/* let's suppose that expr = (OR a b) */

addOuputCct(pC,"s1",one);
addOuputCct(pC,"s2",ablToBddCct(pC,expr));

printf("number of nodes of the BDDs system = %d",numberNodeAllBdd());
gcNodeCct(pC,1)
printf("After GC : number of nodes of the BDDs system = %d",numberNodeAllBdd());

/* it will display
number of nodes of the BDDs system = 3
After GC : number of nodes of the BDDs system = 2
*/

destroyCct(pC);
destroyBdd(1);
.fi
.SH SEE ALSO
.BR log (1),
.BR bdd (1),
.BR gcNodeCct (3),
.BR numberAllNodeBdd (3).

.so man1/alc_bug_report.1

