.\"   $Id: DP_MULTP.3,v 1.1 1999/05/31 17:30:15 alliance Exp $
.TH DP_MULTP 3 "October 1, 1997" "ASIM/LIP6" "FITPATH Macro-Functions"
.so man1/alc_origin.1
.SH NAME
\fBDP_MULTP\fP - Unpipelined array multiplier.
.LP
.SH SYNOPSYS
.ft CR
.nf
#include  <fpgen.h>
void  DP_MULTP( 
    char *InstName,  /*            Instance name             */
    long  MWide   ,  /*        Wide of the B operand         */
    long  T0      ,  /*         register after  DNC          */
    long  T1      ,  /*         register before CLA          */
    long  N       ,  /*       registers in the MUX+CSA       */

    char *BusA    ,  /* IN    First Operand (  N wide)  DATA */
    char *BusB    ,  /* IN   Second Operand (M   wide)  DATA */
    char *SigCK   ,  /* IN            Clock             CTRL */
    char *SigSD   ,  /* IN        Fonc Mode Enable      CTRL */
    char *SigST   ,  /* IN        Test Mode Enable      CTRL */
    char *SigScin ,  /* IN       Scan Input             CTRL */
    char *SigScout,  /* OUT      Scan Output            CTRL */
    char *SigP    ,  /* OUT         Product (M+N wide)  DATA */
               EOL);
.fi
.ft R
.SH DESCRIPTION
.LP
.ta 4m +4n +2n +14n +2n
	\fBDP_MULTP\fP creates an unpipelined array multiplier and then
instanciates it with the name \fIInstName\fP. The MULTPiplier bit-size is
the full wide of the current data-path, set by the previous call to
the function \fBDP_DEFLOFIG\fP. As a consequence the wide of the \fBA\fP
input bus is always the full data-path wide, and the wide of the \fBB\fP
input bus is given by the \fPMWide\fP structural parameter. The wide of
the result \fBP\fP is \fBN+M\fP.
.br
	For more informations about the various pipeline stages sets by
\fBT0\fP, \fBT1\fP and \fBN\fP structural parameters, please refer to
\fBamg(1)\fP.
.br
	The environment variable \fBMBK_CATA_LIB\fP have to contain an additionnal
library path when using this macro-function, see \fBfpgen(1)\fP for more
details.
.br
.SH CHARACTERISTICS
.ta +15n +2n +2n
Operator wide	:	Depends on the data-path wide.
.SH EXAMPLE
.ft CR
.nf
DP_MULTP("mult_instance0", 16
                           "input_a[31:0]", 
                           "input_b[15:0]", 
                                "ck",
                                "sd",
                                "st",
                             "scin" ,
                             "scout",
                           "output_p[47:0]", EOL);
.fi
.ft R
.SH SEE ALSO
.ft B
amg(1)
,
fpgen(1), dpr(1), genlib(1), mbk(1),
DP_DEFLOFIG(3), DP_SAVLOFIG(3), DP_LOCON(3), DP_IMPORT(3),
DP_INV(3), DP_BUSE(3), DP_AND2(3), DP_NAND2(3), DP_AND3(3), DP_NAND3(3),
DP_OR2(3), DP_NOR2(3), DP_OR3(3), DP_NOR3(3), DP_XOR2(3), DP_XNOR2(3),
DP_NAND2MASK(3), DP_NOR2MASK(3), DP_XNOR2MASK(3), DP_CONST(3),
DP_NMUX2CS(3), DP_MUX2CS(3), DP_MUX3CS(3), DP_MUX4CS(3), DP_MUX5CS(3),
DP_BUSE(3), DP_NBUSE(3), DP_ADD2F(3), DP_ADSB2F(3),
DP_SHIFT(3), DP_MULT(3), DP_MULTP(3), DP_NUL(3),
DP_PDFF(3), DP_PDFFR(3), DP_PDFFT(3), DP_PDFFRT(3),
DP_RFG1C0(3), DP_RFG1CC(3), DP_RFG2C0(3), DP_RFG2CC(3)
,


.so man1/alc_bug_report.1

