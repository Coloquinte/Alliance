.\"   $Id: librds.1,v 1.1 1999/05/31 17:30:14 alliance Exp $
.\" @(#)librds.1 0.0 93/18/08 UPMC
.if t \{\
.so man1/alc_contents.mac
.XS \n%
.ti 0.2i
librds
.XE
.XS0 \n%
.ti 0.2i
librds
.XE0 \}
.TH LIBRDS 1 "October 1, 1997" "ASIM/LIP6" "RDS LIBRARY VERSION 202"
.SH NAME
librds \- rds library description
.SH DESCRIPTION
.IP
.IP I)
DATA STRUCTURES USED
.RS
.IP A)
rdsrec_list structure
.PP
The rdsrec_list structure is used to describe a rectangle which belongs to a symbolic figure.
.PP
The following C structure supports the description of a rectangle :
.PP
.RS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
typedef struct rdsrec_list
     {
        struct  rdsrec_list     \(**NEXT;
        long                     X;
        long                     Y;
        long                     DX;
        long                     DY;
        long                     FLAGS;
        char                    \(**NAME;
        void                    \(**USER;
     } rdsrec_list;
.ft R
.fi
.RE
.PP
Description of the structure's fields :
.TP
\fINEXT\fP :
Pointer to the next rectangle whitch belongs to the list of rectangles.
.TP
\fIX,Y\fP :
Coordinates of one of the extremities of the rectangle.
.TP
\fIDX,DY\fP :
Width and lenght of the rectangle ; fixes the position of the second extremity of the rectangle.
.TP
\fIFLAGS\fP :
32 bits flag; contains informations about the rectangle.
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
31..........................17.16..............................0
|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X|X| 
|-----------------------------|-|-|-----|-------|---------------|
    reserved for user          ^ ^ type   object      Layer
			       | |
			       | figure/instance     
			       |
			       one/many window(s)
.ft R
.fi
.TP
\fI\- first 8 bits (0 to 7)\fP
reserved to code the layer, constants used to code the layer can take the values as follows (defined in rdsnnn.h) :
RDS_NWELL, RDS_PWELL, RDS_ACTIV, RDS_NIMP,    
RDS_PIMP, RDS_NDIF, RDS_PDIF, RDS_NTIE,    
RDS_PTIE, RDS_POLY, RDS_GATE, RDS_TPOLY,   
RDS_CONT, RDS_ALU1, RDS_TALU1, RDS_VIA1,    
RDS_ALU2, RDS_TALU2, RDS_VIA2, RDS_ALU3,    
RDS_TALU3, RDS_VIA3, RDS_ALU4, RDS_VIA4,    
RDS_CPAS, RDS_PPOL, RDS_REF, RDS_USER0,   
RDS_USER1, RDS_USER2, RDS_ABOX    
.TP
\fI\- 4 next bits\fP
MBK object which belongs the rectangle, constants used to code the object can take the values as follows (defined in rfmnnn.h) :
MBK_CONNECTOR,  MBK_SEGMENT,   MBK_REFERENCE,
MBK_VIA,        MBK_INSTANCE,  MBK_FIGURE
.TP
\fI\- 3 next bits\fP
complementary information about connectors and references objects, constants used to code these bits can take the values as follows (defined in rfmnnn.h) :
.PP
RDS_CON_EXTER, RDS_CON_INTER : external/internal connector ;
.br
RDS_REF_REF, RDS_REF_CON : reference type.
.TP
\fI\- next bit
Determine if the rectangle belongs to a figure or an instance. The constant used to code this bit can take the value as follows (defined in rfmnnn.h) :
.IP
RDS_FIG_REC
.TP
\fI\- next bit
Determine if the rectangle belongs to one or many windows. The constant used to code this bit can take the value as follows (defined in rwinnn.h) :
.IP
RDS_ONE_WINDOW
.PP
\- \fIthe 15 bits\fP remaining are free and can be used by the user.
.TP
\fINAME\fP :
rectangle's name 
.TP
\fIUSER\fP :
not used in RDS library. It's used in RFM library and RWI library.If the user wants to use both libraries, he has to save (in an added structure to the rdsrec_list structure, for example) the USER field after calling the functions of one of the two libraries. In RFM library, the field USER is used to chain rectangles belonging to a same object. In RWI library, the field USER is used know the windows which contains the rectangle.
.IP B)
rdsins_list structure
.PP
The rdsins_list structure is used to describe an instance which belongs to a symbolic figure.
.PP
The following C structure supports the description of an instance :
.PP
.RS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
typedef struct rdsins_list
     {
        struct rdsins_list \(**NEXT;
        char               \(**FIGNAME;
        char               \(**INSNAME;
        long                X;
        long                Y;
        char                TRANSF;
        unsigned int        SIZE;
        struct rdsrec_list \(**LAYERTAB[ RDS_MAX_LAYER ];
        struct rdsrec_list \(**COURONNE[ RDS_MAX_LAYER ];
        void               \(**USER;
     } rdsins_list;
.ft R
.fi
.RE
.PP
Description of the structure's fields :
.TP
\fINEXT\fP :
Pointer to the next instance whitch belongs to the list of instances.
.TP 
\fIFIGNAME\fP :
Model's name of the instance.
.TP
\fIINSNAME\fP :
Instance name in the figure of higher hierarchical level.
.TP
\fIX,Y\fP :
Position of the lower left corner of instance after geometrical transformation.
.TP
\fITRANSF\fP :
Geometrical transformation applied to the instance before placing.
.PP
The field TRANSF can take these values :
.RS
.TP 20
\fIRDS_NOSYM\fP 
no symmetry.
.TP
\fIRDS_ROT_P\fP 
90 degrees rotation counter clockwise.
.TP
\fIRDS_SYMXY \fP
Symmetry with regard to a horizontal and vertical axis.
.TP
\fIRDS_ROT_M\fP 
90 degrees rotation clockwise.
.TP
\fIRDS_SYM_X\fP 
Symmetry with regard to a vertical axis.
.TP
\fIRDS_SY_RM\fP 
Symmetry with regard to a vertical axis and 90 degrees clockwise.
.TP
\fIRDS_SYM_Y\fP 
Symmetry with regard to a horizontal axis.
.TP
\fIRDS_SY_RP\fP 
Symmetry with regard to a horizontal axis and 90 degrees rotation counter clockwise.
.RE
.TP
\fISIZE\fP : 
Size of the user structure which can be added to a rdsrec_list structure.
.TP
\fILAYERTAB [RDS_MAX_LAYER]\fP :
Table of layers which contains rectangle's list associated to each layer. 
.TP
\fICOURONNE [RDS_MAX_LAYER]\fP :
Specific field used by some tools. Table of layers which contains rectangle's list associated to each layer. These rectangles compose the instance's perimeter. 
.IP C) 
rdsfig_list structure
.PP
The rdsfig_list structure is used to describe a hierarchical level of a symbolic figure.
.PP
The following C structure supports the description of a figure :
.PP
.RS
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
typedef struct rdsfig_list
     {
        struct rdsfig_list   \(**NEXT;
        char                 \(**NAME;
        struct rdsrec_list   \(**LAYERTAB[ RDS_MAX_LAYER ];
        struct rdsins_list   \(**INSTANCE;
        char                  MODE;
        unsigned int          SIZE;
        char                  FLAGTAB[ RDS_MAX_LAYER ];
        struct rdsrec_list   \(**BBOXTAB[ RDS_MAX_LAYER ];
        void                 \(**USER;
     } rdsfig_list;
.ft R
.fi
.RE
.PP
Description of the structure's fields :
.TP
\fINEXT\fP :
Pointer to the next figure of figure's list.
.TP
\fINAME\fP :  
Name of the figure : it identifies the figure so it must be unique and identical to the filename which describes the figure on disk.
.TP
\fILAYERTAB [RDS_MAX_LAYER]\fP : 
Table of layers which contains rectangle's list associated to each layer. 
.TP
\fIINSTANCE\fP : 
Pointer to the head of the list of instances of the figure.
.TP
\fIMODE\fP :   
Caracter indicating the status of the figure in memory. 
.PP
This field can take three values : 
.RS
.TP
\fI\'A\'\fP 
All the cell is loaded in ram (The figure, its rectangles and its instances empty).
.TP
\fI\'P\'\fP 
Only information concerning the model interface is present, that means : connectors, the abutment box and through routes of the figure.
.TP
\fI\'V\'\fP
Visualization mode : all is loaded in RAM : The figure, its rectangles, its instances and the rectangles of its instances. 
.RE
.TP
\fISIZE\fP :   
Size of the user structure which can be added to a rdsrec_list structure.
.TP
\fIFLAGTAB[RDS_MAX_LAYER]\fP :  
This is a table of flags associated to each layer. This table is free for the user.
.TP
\fIBBOXTAB[RDS_MAX_LAYER]\fP : 
This table is used to contain the bounding box of a circuit by layer (It is used by the s2r tool).
.TP
\fIUSER\fP :  
Pointer free for the user.
.RE
.IP II)  
Description of global variables and constants of the library
.RS
.IP A) 
Constants of the library
.TP
\fIRDS_MAX_TRANSF\fP  
Maximum number of possible geometrical transformations applied to an instance (defines the size of the table RDS_TRANSF_NAME[]).
.TP
\fIRDS_MAX_LAYER\fP   
Maximum number of layers defined in RDS library (defines the size of the table RDS_LAYER_NAME).
.TP
\fIRDS_ALLOC_BLOCK\fP 
Used in rdsalloc function to set a BLOCK allocation. 
.TP        
\fIRDS_ALLOC_HEAP\fP  
Used in rdsalloc function to set a HEAP allocation.
.TP
\fITransformation constants\fP
RDS_NOSYM, RDS_ROT_P, RDS_SYMXY, RDS_ROT_M, RDS_SYM_X, RDS_SY_RM, RDS_SYM_Y, RDS_SY_RP :
.IP
define the transformation to apply to an instance (see rdsins_list structure).
.TP
\fILayer constants\fP
RDS_NWELL, RDS_PWELL, RDS_NDIF, RDS_PDIF, RDS_NTIE, RDS_PTIE, RDS_POLY, RDS_GATE, RDS_TPOLY, RDS_CONT, RDS_ALU1, RDS_TALU1, RDS_VIA1, RDS_ALU2, RDS_TALU2, RDS_VIA2, RDS_ALU3, RDS_TALU3, RDS_ACTIV, RDS_NIMP, RDS_PIMP, RDS_REF, RDS_USER0, RDS_USER1, RDS_USER2, RDS_ABOX :
.TP
\fIMBK_CONNECTOR\fP
Represents object type of the field \'FLAGS\' of the rdsrec_list structure which is a MBK connector.
.TP
\fIMBK_SEGMENT\fP
Represents object type of the field \'FLAGS\' of the rdsrec_list structure which is a MBK segment.
.TP
\fIMBK_REFERENCE\fP
Represents object type of the field \'FLAGS\' of the rdsrec_list structure which is a MBK reference.
.TP
\fIMBK_VIA\fP
Represents object type of the field \'FLAGS\' of the rdsrec_list structure which is a MBK contact.
.TP
\fIMBK_INSTANCE\fP
Represents object type of the field \'FLAGS\' of the rdsrec_list structure which is a MBK instance.
.TP
\fIMBK_FIGURE\fP
Represents object type of the field \'FLAGS\' of the rdsrec_list structure which is a MBK figure.
.TP
\fIMBK_TYPE\fP
Mask of the field \'FLAGS\' of the rdsrec_list structure which permits to get object type.(see librds).
.TP
\fIRDS_FIG_REC\fP
Represents the bit of the field \'FLAGS\' of the rdsrec_list structure that means if the rectangle belongs to a figure or to an instance.
.TP
\fIRDS_CON_EXTER\fP
Represents the type of the MBK connector of the field \'FLAGS\' of the rdsrec_list structure (external connector).
.TP
\fIRDS_CON_INTER\fP
Represents the type of the MBK connector of the field \'FLAGS\' of the rdsrec_list structure (internal connector).
.TP 
\fIRDS_REF_REF\fP
Represents the type of the MBK reference of the field \'FLAGS\' of the rdsrec_list structure (ref_ref reference).
.TP
\fIRDS_REF_CON\fP
Represents the type of the MBK reference of the field \'FLAGS\' of the rdsrec_list structure (ref_con reference).
.TP
\fIRDS_EXTRACT_TYPE\fP
Mask of the field \'FLAGS\' of the rdsrec_list structure which permits to get additionnal object type (for a reference or a connector).
.IP
Constants associated to the possible layers.
.IP B) 
Global variables
.PP
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
\fIrdsfig_list \(**HEAD_RDSFIG;\fP
.ft R
.fi
.PP
HEAD_RDSFIG is a pointer to the head of the list of figures in memory.
.PP
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
\fIchar RDS_LAYER_NAME [ RDS_MAX_LAYER ] [ 12 ]\fP =
       {
         "RDS_NWELL  ",
         "RDS_PWELL  ",
         "RDS_ACTIV  ",
         "RDS_NINP   ",
         "RDS_PINP   ",
         "RDS_NDIF   ",
         "RDS_PDIF   ",
         "RDS_NTIE   ",
         "RDS_PTIE   ",
         "RDS_POLY   ",
         "RDS_GATE   ",
         "RDS_TPOLY  ",
         "RDS_CONT   ",
         "RDS_ALU1   ",
         "RDS_TALU1  ",
         "RDS_VIA1   ",
         "RDS_ALU2   ",
         "RDS_TALU2  ",
         "RDS_VIA2   ",
         "RDS_ALU3   ",
         "RDS_TALU3  ",
         "RDS_VIA3   ",
         "RDS_ALU4   ",
         "RDS_VIA4   ",
         "RDS_CPAS   ",
         "RDS_PPOL   ",
         "RDS_REF    ",
         "RDS_USER0  ",
         "RDS_USER1  ",
         "RDS_USER2  ",
         "RDS_ABOX   "
       };
.ft R
.fi
.PP
The \fBRDS_LAYER_NAME\fP table contains names of possible layers of a rectangle. May be used when debugging a programme.
.PP
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
\fIchar RDS_TRANSF_NAME [ RDS_MAX_TRANSF ][ 8 ]\fP =
       {
         "NOSYM",
         "ROT_P",
         "SYMXY",
         "ROT_M",
         "SYM_X",
         "SY_RM",
         "SYM_Y",
         "SY_RP"
       };
.ft R
.fi
.PP
The \fBRDS_TRANSF_NAME\fP table contains names of possible transformations of an instance. May be used when debugging a programme.
.RE
.IP III) 
Description of the macros
.PP
\-  char GetRdsLayer( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
\fBGetRdsLayer\fP function gets the layer associated to the rectangle by testing the field FLAGS of the rdsrec_list structure.The returned value corresponds to the following layers :
.RE
.PP
.nf
.if n \{\
.ft B \}
.if t \{\
.ft CR \}
.ta 3n 20n 30n
.RS
0   -> RDS_NWELL   
1   -> RDS_PWELL   
2   -> RDS_ACTIV   
3   -> RDS_NIMP    
4   -> RDS_PIMP    
5   -> RDS_NDIF    
6   -> RDS_PDIF    
7   -> RDS_NTIE    
8   -> RDS_PTIE    
9   -> RDS_POLY    
10  -> RDS_GATE    
11  -> RDS_TPOLY   
12  -> RDS_CONT    
13  -> RDS_ALU1    
14  -> RDS_TALU1   
15  -> RDS_VIA1    
16  -> RDS_ALU2    
17  -> RDS_TALU2   
18  -> RDS_VIA2    
19  -> RDS_ALU3    
20  -> RDS_TALU3   
21  -> RDS_VIA3    
22  -> RDS_ALU4    
23  -> RDS_VIA4    
24  -> RDS_CPAS    
25  -> RDS_PPOL    
26  -> RDS_REF     
27  -> RDS_USER0   
28  -> RDS_USER1   
29  -> RDS_USER2   
30  -> RDS_ABOX    
.RE
.ft R
.fi
.PP
Where the names "RDS_XXXXX" are some constants defined in the file "rdsnnn.h".
.PP
\-  void SetRdsLayer( Rectangle, Layer )
.br
    rdsrec_list \(**Rectangle;
.br
    char         Layer;
.RS
.PP
The \fBSetRdsLayer\fP function sets in the FLAGS field of rdsrec_list structure the layer associated to the rectangle.
.RE
.PP
Macros for testing rectangle type :
.PP
\-  char IsRdsConnector( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a MBK connector :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsConExter( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is an external MBK connector :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsConInter( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is an internal MBK connector :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsSegment( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a MBK segment :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsReference( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a MBK reference :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsRefRef( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a Ref_Ref MBK reference :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsRefCon( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a Ref_Con MBK reference :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsVia( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a MBK contact :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsInstance( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is an MBK instance :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsFigure( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle is a MBK figure :
.br
If true, then value 1 is returned else value 0 is returned.
.RE
.PP
\-  char IsRdsFigRec( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Tests if the rectangle belongs to  a MBK figure :
.br
If true, then value 1 is returned else value 0 is returned (it belongs to an instance).
.RE
.PP
Macros for setting rectangle type :
.PP
.PP
\-  void SetRdsConnector( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets rectangle type as a \fBconnector\fP.
.RE
.PP
\-  void SetRdsConExter( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets connector type as \fBexternal\fP connector. Uses the RDS_CON_EXTER constant in the field \'FLAGS\' of rdsrec_list structure.
.RE
.PP
\-  void SetRdsConInter( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets connector type as \fBinternal\fP connector. Uses the RDS_CON_INTER constant in the field \'FLAGS\' of rdsrec_list structure.
.RE
.PP
\-  void SetRdsSegment( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets rectangle type as a segment.
.RE
.PP
-  void SetRdsReference( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets rectangle type as a reference.
.RE
.PP
\-  void SetRdsRefRef( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets reference type as \fBREF_REF\fP reference. Uses the RDS_REF_REF constant in the field \'FLAGS\' of rdsrec_list structure.
.RE
.PP
\-  void SetRdsRefCon( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets reference type as \fBREF_CON\fP reference. Uses the RDS_REF_CON constant in the field \'FLAGS\' of rdsrec_list structure.
.RE
.PP
\-  void SetRdsVia( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets the rectangle type as a contact.
.RE
.PP
\-  SetRdsInstance( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets the rectangle type as an instance.
.RE
.PP
\-  SetRdsFigure( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets the rectangle type as a figure.
.RE
.PP
\-  SetRdsFigRec( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets the rectangle type as belonging to a figure.
.RE
.PP
\-  ClearRdsFigRec( Rectangle )
.br
    rdsrec_list \(**Rectangle;
.RS
.PP
Sets the rectangle type as not belonging to a figure.It can be used to mean that the rectangle belongs to an instance.
.RE
.IP VI) 
Functions of LibRds library
.TP
\fIrdsalloc\fP     
memory allocation
.TP
\fIrdsfree\fP      
memory freeing 
.TP
\fIallocrdsfig\fP  
allocates memory for a figure
.TP
\fIallocrdsins\fP  
allocates memory for an instance
.TP  
\fIallocrdsrec\fP  
allocates memory for a rectangle
.TP
\fIfreerdsfig\fP   
frees memory of a figure
.TP
\fIfreerdsins\fP   
frees memory of an instance
.TP
\fIfreerdsrec\fP   
frees memory of a rectangle
.TP
\fIaddrdsfig\fP    
adds a figure to the head of figures's list
.TP
\fIaddrdsins\fP    
adds an instance to the head of instances's list of a figure 
.TP
\fIaddrdsinsrec\fP 
adds a rectangle in an instance
.TP
\fIaddrdsfigrec\fP 
adds a rectangle in a figure
.TP
\fIdelrdsfig\fP    
deletes a figure and the objects contained in it
.TP
\fIdelrdsins\fP    
deletes an instance and the objects contained in it
.TP
\fIdelrdsinsrec\fP 
deletes a rectangle in an instance
.TP
\fIdelrdsfigrec\fP 
deletes a rectangle in a figure
.TP
\fIviewrdsrec\fP   
displays caracteristics of a rectangle
.TP
\fIviewrdsins\fP   
displays caracteristics of an instance
.TP
\fIviewrdsfig\fP   
displays caracteristics of a figure
.RE
.SH SEE ALSO
.BR librfm,
.BR librpr,
.BR librut,
.BR librtl,
.BR librwi


.so man1/alc_bug_report.1

