.\"   $Id: genbs.1,v 1.1 1999/05/31 17:30:14 alliance Exp $
.\" @(#)Labo.l 1.0 96/01/02 UPMC; Author: Olivier FLORENT
.pl -.4
.TH GENBS 1 "October 1, 1997" "ASIM/LIP6" "ALLIANCE USER COMMANDS"
.SH NAME
.TP
genbs - A IEEE 1149.1 Boundary\-Scan Architecture Generator
.so man1/alc_origin.1
.SH SYNOPSIS
.TP
\fBgenbs\fP \fI<expert options>\fP \fI<user options>\fP \fI<chip_name>\fP \fI<core_name>\fP
.br
.SH DESCRIPTION
\fBgenbs\fP is an automatic Boundary\-Scan Architecture generator,
according to IEEE 1149.1-1990 standard, also known as JTAG. It looks
for a chip hierarchical description (\fI<chip_name>\fP) containing
pads and a core called \fI<core_name>\fP, and generates a new
hierarchical chip description containing the core, the pads and all
the Boundary\-Scan circuitry.  \fI<expert options>\fP describes the
target pads and defines the mode of generation (structural or
behavioural blocks).  \fI<user options>\fP defines Boundary\-Scan
specific options. If no \fI<user options>\fP are provided, a minimal
but fully compliant Boundary\-Scan Architecture is generated.

.SH INPUT FILES
.TP 10
\fI<chip_name>.vst\fP 
The hierarchical netlist describing the chip.
It must only contain pads and a core netlist.  
File format (here \fI.vst\fP) can be changed using MBK\_IN\_LO 
environment variable.

.TP 10
\fI<core_name>.vst\fP 
The hierarchical netlist describing the core.
File format (here \fI.vst\fP) can be changed using MBK\_IN\_LO
environment variable.

.TP 10
\fI<chip_name>.rin\fP
A file describing the pad order in the pad
ring. This is the same file as used by the pad router
\fIring\fP.  See \fIring(1)\fP for more info on this file format.
This file is used by \fBgenbs\fP to know how to chain the pads in the
boundary\-scan register.

.SH EXPERT OPTIONS
Theses options describes the pad library and the mode of generation.
Usually theses options are defined once for every pad library and are
provided by the program maintainer.

.TP 10
\fI-padin <name> <in> <out> <inv>\fP 
This option describes an input
pad model called \fI<name>\fP. Its input connector is called
\fI<in>\fP, its output connector is called \fI<out>\fP. If
\fI<inv>\fP is '0' then there is an inversion beetween \fI<in>\fP and
\fI<out>\fP.  For example :
.br
	    -padin pi_sp pad t 1
.br
describes a non inverting input pad model called \fIpi_sp\fP.

.TP 10
\fI-padout <name> <in> <out> <inv>\fP 
This option describes an output
pad model called \fI<name>\fP. Its input connector is called
\fI<in>\fP, its output connector is called \fI<out>\fP. If
\fI<inv>\fP is '0' then there is an inversion beetween \fI<in>\fP and
\fI<out>\fP.  For example :
.br
	    -padout po_sp t pad 1
.br
describes a non inverting output pad model called \fIpo_sp\fP.

.TP 10
\fI-padtri <name> <in> <out> <inv> <enable> <pol>\fP 
This option
describes an output tristate pad model called \fI<name>\fP. Its input
connector is called \fI<in>\fP, its output connector is called
\fI<out>\fP. If \fI<inv>\fP is '0' then there is an inversion
beetween \fI<in>\fP and \fI<out>\fP. Its output enable connector is
called \fI<enable>\fP. If this output enable connector is active low,
then \fI<pol>\fP must be '0', else '1'. For example :
.br
	    -padtri pot_sp i pad 1 b 1
.br
describes a non inverting output tristate pad model called
\fIpot_sp\fP with its output enable connector \fIb\fP active high.

.TP 10
\fI-padbidir\fP \fI<name>\fP \fI<dtin>\fP \fI<dtout>\fP \fI<invi>\fP \fI<out>\fP
\fI<invo>\fP \fI<enable>\fP \fI<pol>\fP

This option describes an output bidirectionnal pad model
called \fI<name>\fP. Its internal input data connector is called
\fI<dtin>\fP, its internal output data connector is called
\fI<dtout>\fP, and its external bidirectionnal output connector is
called \fI<out>\fP. If \fI<invi>\fP is '0' then there is an inversion
beetween the internal data connector \fI<dtin>\fP and the external
bidirectionnal output connector \fI<out>\fP.  If \fI<invo>\fP is '0'
then there is an inversion beetween the internal data connector
\fI<dtout>\fP and the external bidirectionnal output connector
\fI<out>\fP.  Its output enable connector is called \fI<enable>\fP.
If this output enable connector is active low then \fI<pol>\fP must
be '0', else '1'. For example :
.br
	    -padbidir piot_sp i t 1 pad 1 b 1
.br
describes a non inverting output bidirectionnal pad model called
\fIpiot_sp\fP with its output enable connector \fIb\fP active high.

.TP 10
\fB-pad\fP | \fB-core\fP
With \fI-pad\fP option, boundary-scan cells
are generated in the core of the chip. This is used for \fBPAD
LIMITED\fP chips. With \fI-core\fP option, boundary-scan cells are
located in the pad. This is used for \fBCORE LIMITED\fP chips. If
this option is active the pad library must be specific to
Boundary-scan Architecture.  \fI-core\fP option is not currently
implemented.

.TP 10
\fB-sclib\fP 
If this option is active, the generated blocks are
automatically mapped on SCLIB, The ALLIANCE CAD SYSTEM standard cell
library. See \fBsclib(1)\fP for more info on this standard cell
library. By default, the generated blocks are described using a VHDL
Behavioural description. See \fBvhdl(5)\fP for more info on ALLIANCE
CAD SYSTEM VHDL subset.

.SH USER OPTIONS
Theses options are used to add specific parameters to the generated
boundary-scan architecture and to rename output files. If no \fI<user
options>\fP are provided, a minimal full compliant IEEE 1149.1 chip
is generated including a 2 bits instruction register, a
boundary\-scan register, and a bypass register, and with the three
mandatory instruction \fBEXTEST\fP, \fBBYPASS\fP and \fBSAMPLE\fP, as
specified by the standard.

.TP 10
\fI-bypass <inst>\fP 
Specify the binary code \fI<inst>\fP of the
mandatory instruction \fBBYPASS\fP. Standard requires that
\fBBYPASS\fP binary instruction code must be all '1'.

.TP 10
\fI-extest    <inst>\fP 
Specify the binary code \fI<inst>\fP of the
mandatory instruction \fBEXTEST\fP. Standard requires that
\fBEXTEST\fP binary instruction code must be all '0'.

.TP 10
\fI-sample    <inst>\fP 
Specify the binary code \fI<inst>\fP of the
mandatory instruction \fBSAMPLE\fP.

.TP 10
\fI-intest    <inst>\fP 
Specify the binary code \fI<inst>\fP of the
optional instruction \fBINTEST\fP.

.TP 10
\fI-idcode    <inst> <code>\fP 
Specify the binary code \fI<inst>\fP
of the optional instruction \fBIDCODE\fP, and specify the 32 bit
hexadecimal Identification code \fI<code>\fP.

.TP 10
\fI-usercode  <inst> <code>\fP
Specify the binary code \fI<inst>\fP
of the optional instruction \fBUSERCODE\fP, and specify the 32 bit
hexadecimal User Identification code \fI<code>\fP.

.TP 10
\fI-hiz       <inst>\fP 
Specify the binary code \fI<inst>\fP of the
optional instruction \fBHIZ\fP. This option is not yet implemented.

.TP 10
\fI-clamp     <inst>\fP 
Specify the binary code \fI<inst>\fP of the
optional instruction \fBCLAMP\fP. This option is not yet
implemented.

.TP 10
\fI-runbist   <inst>\fP 
Specify the binary code \fI<inst>\fP of the
optional instruction \fBRUNBIST\fP. This option is not yet
implemented.

.TP 10
\fI-nock\fP 
This options tells \fBgenbs\fP to not include the clock
connector in the boundary-scan register. This is mandatory when using
a special clock tree distribution.

.TP 10
\fI-trst\fP
This options tells \fBgenbs\fP to include the optional reset pin \fBTRST\fP
in the boundary-scan circuitry.

.TP 10
\fI-prefix <prefix>\fP
Prefixs all the output files with
\fI<prefix>\fP. Default prefix is \fIbs_\fP

.TP 10
\fI-out <out_chip_name>\fP
The new chip will be called \fI<out_chip_name>\fP instead of
\fIbs_<chip_name>\fP

.TP 10
\fI-overwrite\fP 
Force writing of files even if they already exist on
disk.

.TP 10
\fI-catal <output_catal_name>\fP
Specify the name of the output catal
when VHDL behavioural files are generated. The default name is
\fIbs_CATAL\fP.

.TP 10
\fI-scanpath  <inst>\fP 
Specify the binary code \fI<inst>\fP of the
private instruction \fBSCANPATH\fP. This instruction allows a single
scan-path to be connected between \fITDI\fP and \fITDO\fP. This is a
private instruction and may not be fully compliant with the standard.
This option requires \fI-scin\fP, \fI-scout\fP, \fI-test\fP,
\fI-ckscan\fP and \fI-splength\fP options to be supplied.

.TP 10
\fI-scin   <pin_name> \fP 
Specify the name \fI<pin_name>\fP of the
chip scan-path input connector. This pin will be replaced by the
\fITDI\fP input in the new chip.

.TP 10
\fI-scout  <pin_name> \fP 
Specify the name \fI<pin_name>\fP of the
chip scan-path output connector. This pin will be replaced by the
\fITDO\fP output in the new chip.

.TP 10
\fI-test   <pin_name> <pol> \fP 
Specify the name \fI<pin_name>\fP of
the chip scan-path test-mode connector. This pin will be replaced by
the \fITMS\fP input in the new chip. If the scan-path test-mode
connector is active high, \fI<pol>\fP must be '1', else '0'.

.TP 10
\fI-ckscan <pin_name> <pol>\fP 
Specify the name \fI<pin_name>\fP of
the chip scan-path clock connector. If this clock is a rising edge
clock, then \fI<pol>\fP must be '1'. If this clock is a falling edge
clock, then \fI<pol>\fP must be '0'.

.TP 10
\fI-splength <n> \fP
Specify the scan-path length in bits. This will
be used to generate verification patterns for the private instruction
\fBSCANPATH\fP. (see OUTPUT FILES section).

.SH OUTPUT FILES

\fBgenbs\fP produces several files : basic boundary-scan blocks
description, new netlists, patterns and info files.

1/ Output basic boundary-scan blocks description

The basics boundary-scan blocks can be obtained in two ways : with
\fB-sclib\fP option, you will obtain structural files mapped on
\fBsclib\fP standard cell library (currently \fBsclib version
5.2\fP. Output netlist file format will be determinated by
\fBMBK\_OUT\_LO\fP environment variable. With no \fB-sclib\fP option,
you will obtain VHDL behavioural files.
All the file names are prefixed with the default prefix (see \fB-prefix\fP
option). The basics boundary-scan blocks generated are :

.TP 10
\fBbs_in\fP
One bit input Boundary-scan cell

.TP 10
\fBbs_out\fP
One bit output Boundary-scan cell

.TP 10
\fBbs_trim\fP
One bit tristate master Boundary-scan cell. A master tristate Boundary-scan cell
contains 2 outputs : one for data and one for output enable.

.TP 10
\fBbs_tris\fP
One bit tristate slave Boundary-scan cell. A slave tristate Boundary-scan cell
contains only one output data. Output enable is provided by a master 
Boundary-scan cell.

.TP 10
\fBbs_bidm\fP
One bit bidir master Boundary-scan cell. A master bidir Boundary-scan cell
contains 3 outputs : one for data-in, one for data-out and one for
output enable.

.TP 10
\fBbs_bids\fP
One bit bidir slave Boundary-scan cell. A slave bidir Boundary-scan cell
contains only 2 outputs : one for data-in and one for data-out.
Output enable is provided by a master Boundary-scan cell.

.TP 10 
\fBbs_tap\fP
Tap Controller state machine

.TP 10 
\fBbs_idec\fP
Instruction decoder

.TP 10 
\fBbs_bypass\fP
One bit bypass register

.TP 10 
\fBbs_rinst\fP
Instruction register. Instruction register length depends on the number of 
instruction implemented.

.TP 10
\fBbs_muxd\fP
Data register mux. It is a (n ==> 1) mux fed by the (n) data registers.

.TP 10 
\fBbs_muxtdo\fP
TDO output mux. Is is a (2 ==> 1) mux fed by the instruction register and
the output of the Data register mux.

.TP 10
\fBbs_idcd\fP and \fBbs_usercd\fP
32 bits Identification and User code register. They are generated only if
\fB-usercode\fP and \fB-idcode\fP options are choosen.

.PP
2/ Output netlists.
.br
Three netlists are always generated :

.TP 10
\fIbs_bsreg.vst\fI
The boundary-scan register.

.TP 10
\fIbs_<core_name>\fP
The new core netlist. This is a hierarchical netlist containing the
original core and all the boundary-scan circuitry.

.TP 10
\fIbs_<chip_name>\fP
The new chip netlists. This is a hierarchical netlists containing 
the new core and the pads. The new chip name can be changed using the
\fB-out\fP option. 4 new connectors are added to the chip interface :
\fBTMS, TCK, TDI and TDO\fP (and \fBTRST\fP if \fI-trst\fP option is
choosen).


.PP
3/ Miscellaneous files
.br
Pattern and info files are also generated :

.TP 10
\fIbs_<chip_name>_pat.c\fP
This is a genpat file (see \fBgenpat(1)\fP) containing high-level functions
to write boundary-scan patterns for the new chip.

.TP 10
\fIbs_<chip_name>.info\fP
This is a text file containing info about the new chip : the instruction
implemented and their codes, the name of the new blocks, informations
about the chip interface and the boundary-scan register description.

.SH EXAMPLES

Let assume that \fI<expert_options>\fP have been provided by the tool
maintainer.
.br

> genbs amd heart
.br

will generate a minimal full compliant boundary-scan chip named \fBbs_amd\fP
with the three mandatory instruction \fBEXTEST\fP,\fBBYPASS\fP and \fBSAMPLE\fP.

.SH SEE ALSO
MBK_IN_LO(8) 
MBK_OUT_LO(8) 
vbe(5) 
vhdl(5) 
genpat(1) 
sclib(5).


.so man1/alc_bug_report.1


